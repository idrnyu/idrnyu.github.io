<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STM32F1-DAPLink源码编译</title>
    <url>/2019/06/27/STM32F1-DAPLink%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h1 id="DAPLink也带有虚拟串口-web-usb-U盘拖拽下载功能"><a href="#DAPLink也带有虚拟串口-web-usb-U盘拖拽下载功能" class="headerlink" title="DAPLink也带有虚拟串口  web-usb   U盘拖拽下载功能"></a>DAPLink也带有虚拟串口  web-usb   U盘拖拽下载功能</h1><pre><code>DAPLink电路  GitHub  ARM官方
https://github.com/ARMmbed/mbed-HDK-Eagle-Projects
DAPLink源码  GitHub  ARM官方 开发文档
https://github.com/ARMmbed/DAPLink/blob/master/docs/DEVELOPERS-GUIDE.md

淘宝买的Daplink
http://www.eemaker.com/daplink-data.html  资料在这

别人把DAPLink移植到STLink上
https://bh3nvn.github.io/2019/05/DAPLink2STlink/
</code></pre><p>步骤如下：<br><a id="more"></a></p>
<h4 id="要-python-git-mdk-这几个软件"><a href="#要-python-git-mdk-这几个软件" class="headerlink" title="要 python   git   mdk 这几个软件"></a>要 <code>python</code>   <code>git</code>   <code>mdk</code> 这几个软件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mbedmicro/DAPLink     // git 克隆官方项目下来</span><br><span class="line"><span class="built_in">cd</span> DAPLink                                         // 进入这个项目</span><br><span class="line">pip install virtualenv                             // 安装 virtualenv</span><br><span class="line">virtualenv venv                                    </span><br><span class="line"></span><br><span class="line">venv\Scripts\activate.bat                          // 运行</span><br><span class="line">pip install -r requirements.txt                    // 安装需要的依赖包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编译输出全部目标版文件</span><br><span class="line">progen generate -t uvision</span><br><span class="line"></span><br><span class="line">编译输出局部目标板文件</span><br><span class="line">progen generate -p stm32f103xb_bl -t uvision                   //  bootloader文件  需要编译后烧录到目标板</span><br><span class="line">progen generate -p stm32f103xb_stm32f103rb_if -t uvision	//  _if_crc.bin文件  需要把nRST引脚接地插入目标板试别成U盘再考进去，再上啦nRST即可  nRst不是单片机的自身复位</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过MDK打开目标板的工程文件，记住，换工程的时候不能关闭这个命令打开的MDK，只能在这个MDK中openProject<br>tools\launch_uvision.bat<br>这一步可能会报错， 因为每个人的MDK安装路径不一样，  打开这个文件  修改安装路径即可 DAPLink\tools\launch_uvision.bat 文件</p>
</blockquote>
<p><img src="/Dom/imgs/2019_06_27/01.png" width="40%"></p>
<blockquote>
<p>编译的过程中。可能也会报错  python3<br>DAPLink\tools\flash_algo.py   文件中的 StringIO   改为  io   还有 StringIO.StringIO(data)  改为  io.StringIO(data)<br>DAPLink\tools\post_build_script.py  文件中  0xffffffffL  改为  0xffffffff</p>
</blockquote>
<p>编译完  _bl 文件  直接通过MDK烧录到目标板中   拔掉目标板，  将nRST下拉  插入 会试别为U盘<br>编译 _if 文件  将 _if_crc.bin  结尾的文件考到U盘中 拔掉U盘  nRST上拉  完成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">venv\Scripts\deactivate.bat</span><br></pre></td></tr></table></figure>
<p>完成</p>
]]></content>
  </entry>
  <entry>
    <title>STM32F072-JlinkOB固件提取</title>
    <url>/2019/06/27/STM32F072-JlinkOB%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<h1 id="Github-地址：-https-github-com-idrnyu-dllGetSt072JlinkOb"><a href="#Github-地址：-https-github-com-idrnyu-dllGetSt072JlinkOb" class="headerlink" title="Github 地址： https://github.com/idrnyu/dllGetSt072JlinkOb"></a>Github 地址： <a href="https://github.com/idrnyu/dllGetSt072JlinkOb" target="_blank" rel="noopener">https://github.com/idrnyu/dllGetSt072JlinkOb</a></h1><h3 id="视频见详情观看-没有声音-，-里面也有电路-还有工具-STM32F072-Jlink-OB-带虚拟串口"><a href="#视频见详情观看-没有声音-，-里面也有电路-还有工具-STM32F072-Jlink-OB-带虚拟串口" class="headerlink" title="视频见详情观看(没有声音)，  里面也有电路  还有工具  STM32F072-Jlink-OB 带虚拟串口"></a>视频见详情观看(没有声音)，  里面也有电路  还有工具  STM32F072-Jlink-OB 带虚拟串口</h3><a id="more"></a>
<video controls name="media" width="100%"><br>  <source src="https://idrnyu.github.io/dllGetSt072JlinkOb/%E5%9C%A8jlinkARM.dll%E4%B8%AD%E6%8F%90%E5%8F%96Jlink072%E5%9B%BA%E4%BB%B62.mp4" type="video/mp4"><br></video>

]]></content>
  </entry>
  <entry>
    <title>WGS-48坐标转GCJ-02页面</title>
    <url>/2018/03/12/WGS-48%E8%BD%AC%E7%81%AB%E6%98%9F%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[
<img src="https://idrnyu.github.io/idrnyu1/img/gps.png" width="40%" style="display:none">
玩过GPS模块的大侠们都应该知道，在中国用GPS模块接收卫星坐标是标准的大地坐标， 但是我国国土测绘局将绘制的地图是经过加偏后发布公开的，那么我们得到的原始GPS 数据套用在中国地图上是有较大的偏移的…………
<a id="more"></a>

<!DOCTYPE html>
<html>
	<head><meta name="generator" content="Hexo 3.9.0">
		<meta charset="utf-8">
		<title>GPS坐标转火星坐标</title>
		<link rel="icon" type="image/png" href="https://avatars0.githubusercontent.com/u/27189085?v=3&s=460">
		<style type="text/css">
			#ge
			{
				width: 600px;
				margin: 50px auto;
				padding: 20px 0px 50px 50px;
				position: relative;
			}
			a
			{
				display: block;
				widows: auto;
				margin: 20px 0;
				text-decoration: none;  /*删除下划线*/
				color: blue;
				/*transition: all 0.4s;*/
				transition: all 0.4s linear 0.1s;  /*延时执行鼠标放上去的效果*/
			}
			a:hover
			{
				color: white;
				background: black; /* 鼠标放上去背景变色*/
				zoom: 1;
				border-radius: 5px;  /*鼠标放上去让他有圆角边框*/
				margin-left: 30px;  /*鼠标放上去让他移动*/
			}
			li
			{
				list-style: none;
			}
			ul
			{
				padding: 0;
				margin-top: 0;
				display: inline-block;
			}
			#jisuan
			{
				width: 300px;
				position: absolute;
				top: 35px;
				right: 10px;
			}
			p
			{
				margin: 0;
				font-size: 13px;
			}
			.intext
			{
				width: 100px;
			}
		</style>
	</head>
	<body>
		<fieldset id="ge">
			<legend style="color: red;">纠偏+度分秒(DMS)转度(DDD) 台湾地区不需要转为GCJ-02</legend>
			<ul>
				<li><a href="http://lbs.amap.com/api/webservice/guide/api/convert" target="_blank">高德地图的坐标转换</a></li>
				<li><a href="http://lbs.amap.com/console/show/picker" target="_blank">高德地图坐标恰取和坐标收索</a></li>
				<li><a href="http://www.265.me/" target="_blank">地球在线</a></li>
			</ul>
			<div id="jisuan">
				<p style="color: #FF7F50;">GPS接收的数据为:</p>
				<p>dddmm.mmmm&nbsp;&nbsp;经度 &nbsp;如:&nbsp;11345.2245 </p>
				<p>ddmm.mmmm&nbsp;&nbsp;&nbsp;&nbsp;纬度&nbsp;&nbsp;如:&nbsp;2234.1773</p>
				<p style="color: #FF7F50;">换算为ddmmss.ss</p>
				<p>ddd&nbsp;mm+0.mmmm*60&nbsp;=&nbsp;113°45′13.47″经度</p>
				<p>dd&nbsp;mm+0.mmmm*60&nbsp;=&nbsp;22°34′10.64″纬度</p>
				<p style="color: #FF7F50;">换ddmmss.ss到ddd</p>
				<p>ddd°mm′ss.ss″&nbsp;=&nbsp;ddd+(mm/60)+(ss.ss/3600)</p>
			</div>
			<br>
			<input type="text" name id class="intext" value placeholder="度°">°
			<input type="text" name id class="intext" value placeholder="分′">′
			<input type="text" name id class="intext" value placeholder="秒″">″ 经度&nbsp;&nbsp;&nbsp;&nbsp;
			<label><input type="radio" name="latitude" checked="checked">东经E</label>
			<label><input type="radio" name="latitude">西经W</label>
			<br>
			<br>
			<input type="text" name id class="intext" value placeholder="度°">°
			<input type="text" name id class="intext" value placeholder="分′">′
			<input type="text" name id class="intext" value placeholder="秒″">″ 纬度&nbsp;&nbsp;&nbsp;&nbsp;
			<label><input type="radio" name="longitude" checked="checked">北纬N</label>
			<label><input type="radio" name="longitude">南纬S</label>
			<br>
			<br>
			<input type="button" name id value="转换为DDD格式">
			<br>
			<br>
			<span id="EN">0,0</span>（WGS-84 经纬度）
			<br>
			<br>
			<input type="button" name="sess" id="sess" value="WGS84转换火星坐标">
			<br>
			<br>
			<span id="GEN">0,0</span>（GCJ-02 经纬度）
		</fieldset>
		
	</body>
	
	<script type="text/javascript">
		var inps = document.getElementsByTagName("input");
		var spa = document.getElementById("EN");
		var ens = new Array(0,0);
		
		inps[10].onclick=function()
		{
			var du = +inps[0].value;
			var fen = +inps[1].value/60;
			var mis = +inps[2].value/3600;
			if(inps[4].checked)
				ens[0]=-(du+fen+mis);
			else
				ens[0]=du+fen+mis;
			
			du = +inps[5].value;
			fen = +inps[6].value/60;
			mis = +inps[7].value/3600;
			if(inps[9].checked)
				ens[1]=-(du+fen+mis);
			else
				ens[1]=du+fen+mis;
				
			
			spa.innerText=ens.join();
		}
		
		inps[0].focus();  //获取光标
		
		
		var btn = document.getElementById("sess");//获取计算按钮
		var sge = document.getElementById("GEN");
		
		
		btn.onclick=function()  //火星坐标转换
		{
			var datess = transform(ens[1],ens[0]);
			
			sge.innerText=datess.join();
			
		}
		
		
		//
        // Krasovsky 1940
        //
        // a = 6378245.0, 1/f = 298.3
        // b = a * (1 - f)
        // ee = (a^2 - b^2) / a^2;
		
		// var pi = 3.14159265358979324;
		var pi = 3.1415926535897932384626;
		var a = 6378245.0;
		var ee = 0.00669342162296594323;
		
		
		// World Geodetic System ==> Mars Geodetic System
		function transform(wgLat, wgLon)
		{
			if (outOfChina(wgLat, wgLon))  //判断是不是中国坐标  如果不是就返回原始数据  如果不是就转换
			{
				mgLat = wgLat;
				mgLon = wgLon;
				return ["不在中国大陆地区，无需转为GCJ-01坐标"];
			}
			var dLat = transformLat(wgLon - 105.0, wgLat - 35.0);
			var dLon = transformLon(wgLon - 105.0, wgLat - 35.0);
			var radLat = wgLat / 180.0 * pi;
			var magic = Math.sin(radLat);
			magic = 1 - ee * magic * magic;
			var sqrtMagic = Math.sqrt(magic);
			dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * pi);
			dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * pi);
			mgLat = wgLat + dLat;
			mgLon = wgLon + dLon;
			// mgLat=mgLat + 0.00000009;
			// mgLon=mgLon + 0.00000029;  //这两个最微距离纠偏 可能没太大用处
			mgLat = mgLat + 0.000000154;
    	mgLon = mgLon + 0.00000030;
			
			return [mgLon,mgLat];
		}
		
		
		function outOfChina(lat,lon)  //判断是不是中国坐标  
		{
			if (lon < 72.004 || lon > 137.8347)
				return true;
			if (lat < 0.8293 || lat > 55.8271)
				return true;
			return false;
		}
		
		
		function transformLat(x,y)   //Latitude  维度计算
		{
			var ret =  -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x)); //平方根     绝对值
			ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;       
			ret += (20.0 * Math.sin(y * pi) + 40.0 * Math.sin(y / 3.0 * pi)) * 2.0 / 3.0;
			//正弦值 
			ret += (160.0 * Math.sin(y / 12.0 * pi) + 320 * Math.sin(y * pi / 30.0)) * 2.0 / 3.0;
			return ret;
		}
		
		function transformLon(x,y)   //Longitude  经度计算
		{
			var ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x));
			ret += (20.0 * Math.sin(6.0 * x * pi) + 20.0 * Math.sin(2.0 * x * pi)) * 2.0 / 3.0;
			ret += (20.0 * Math.sin(x * pi) + 40.0 * Math.sin(x / 3.0 * pi)) * 2.0 / 3.0;        
			ret += (150.0 * Math.sin(x / 12.0 * pi) + 300.0 * Math.sin(x / 30.0 * pi)) * 2.0 / 3.0;
			return ret;
		}
		
	</script>
</html>]]></content>
      <categories>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>GPS</tag>
        <tag>地图坐标转换</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli 2.* 配置mock模拟数据</title>
    <url>/2018/03/12/Vue-cli-2-%E9%85%8D%E7%BD%AEmock%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p><img src="/Dom/imgs/2018_03_12/m4.png" width="70%"></p>
<h2 id="mockjs介绍："><a href="#mockjs介绍：" class="headerlink" title="mockjs介绍："></a>mockjs介绍：</h2><blockquote>
<p>你是否遇见过，前端开发过程中需要数据测试，但后端却迟迟没给你，没感情了分手吧。<br>是否遇见过需要亲自收集各种各样的数据。<br>那mock.js便可以很好的帮你解决问题。有了它前端就可以事先模拟数据，前提是和后端约定好了数据接口，怎样的数据。使用mock就可以生成你要的数据了，从而实现开发时前后端分离。<br><a id="more"></a></p>
</blockquote>
<h2 id="mockjs主要功能："><a href="#mockjs主要功能：" class="headerlink" title="mockjs主要功能："></a>mockjs主要功能：</h2><blockquote>
<ul>
<li>基于数据模板生成模拟数据。</li>
<li>基于HTML模板生成模拟数据。</li>
<li>拦截并模拟 ajax 请求。</li>
</ul>
</blockquote>
<h2 id="mockjs简单使用栗子："><a href="#mockjs简单使用栗子：" class="headerlink" title="mockjs简单使用栗子："></a>mockjs简单使用栗子：</h2><p><code>1.引入mockjs，引入jquery（此处用jq封装好的ajax发送请求）</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"jquery-3.0.0.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/mockjs.com/</span>dist/mock.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>2.使用mock生成数据模板</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的第一个参数http://api.cn 就是下面ajax请求的url，mock对该url进行拦截'</span></span><br><span class="line"><span class="comment">//这里的第二个参数就是template数据模板，mock会返回模板生成的数据</span></span><br><span class="line">Mock.mock(<span class="string">'http://api.cn'</span>, &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'@name'</span>,</span><br><span class="line">    <span class="string">'age|1-100'</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">'city'</span>: <span class="string">'@city'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>3.ajax发送请求</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//url需要和上面的mock的url相同</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://api.cn'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>) </span>&#123;</span><br><span class="line">    alert(</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>4.效果：</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">键值对</span><br></pre></td></tr></table></figure></p>
<h2 id="那么Vue-cli-2-怎么配置这个东西呢"><a href="#那么Vue-cli-2-怎么配置这个东西呢" class="headerlink" title="那么Vue-cli 2.*怎么配置这个东西呢"></a>那么Vue-cli 2.*怎么配置这个东西呢</h2><blockquote>
<p>在使用vue开发过程中，难免需要去本地数据地址进行请求，而原版配置在<code>dev-server.js</code>中，新版<code>vue-webpack-template</code>已经删除<code>dev-server.js</code>，改用<code>webpack.dev.conf.js</code>代替，所以 配置本地访问在<code>webpack.dev.conf.js</code>里配置即可。</p>
</blockquote>
<h3 id="配置-webpack-dev-conf-js-文件"><a href="#配置-webpack-dev-conf-js-文件" class="headerlink" title="配置 webpack.dev.conf.js 文件"></a>配置 webpack.dev.conf.js 文件</h3><pre><code>该文件在cli构建出的项目的 build 目录下。
在 const portfinder = require(&apos;portfinder&apos;) 添加内容
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> appData = <span class="built_in">require</span>(<span class="string">'../data/data.json'</span>)    <span class="comment">// JSON数据是假数据</span></span><br><span class="line"><span class="keyword">const</span> ratings = appData</span><br><span class="line"><span class="keyword">const</span> apiRouter = express.Router()</span><br><span class="line">app.use(<span class="string">'/api'</span>,apiRouter)</span><br></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>如图：<br><img src="/Dom/imgs/2018_03_12/m1.png" width="100%"></p>
</blockquote>
<pre><code>再在 webpack.dev.conf.js 文件下的 devServer 对象里面添加路由
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">before(app) &#123;</span><br><span class="line">    app.post(<span class="string">'/api/post/ratings'</span>,(req, res) =&gt; &#123;</span><br><span class="line">        <span class="comment">// res.send(ratings.seller);</span></span><br><span class="line">        res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: ratings.seller</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;),</span><br><span class="line">    app.get(<span class="string">'/api/ratings'</span>,(req, res) =&gt; &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">        errno: <span class="number">0</span>,</span><br><span class="line">        data: ratings.goods</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(req.query);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>如图：<br><img src="/Dom/imgs/2018_03_12/m2.png" width="100%"><br>    在自己写的代码中加入ajax请求，请求你想要的接口  这样就可以了<br>如图1:<br><img src="/Dom/imgs/2018_03_12/m3.png" width="100%"><br>如图2:<br><img src="/Dom/imgs/2018_03_12/m4.png" width="100%"><br>如图3:<br><img src="/Dom/imgs/2018_03_12/m5.png" width="100%"><br>如图4:<br><img src="/Dom/imgs/2018_03_12/m6.png" width="100%"><br>如图5:<br><img src="/Dom/imgs/2018_03_12/m7.png" width="100%"></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
        <tag>Vue</tag>
        <tag>mock模拟请求数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo基本命令</title>
    <url>/2017/06/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>STM32的ADC及内部温度传感器的使用</title>
    <url>/2018/03/13/STM32%E7%9A%84ADC%E5%8F%8A%E5%86%85%E9%83%A8%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="STM32的ADC及内部温度传感器的使用"><a href="#STM32的ADC及内部温度传感器的使用" class="headerlink" title="STM32的ADC及内部温度传感器的使用"></a>STM32的ADC及内部温度传感器的使用</h2><blockquote>
<p>ADC的用途范围可以说是非常的广泛~甚至是可以说差不多必不可少了~大部分单片机嵌入式系统ADC都基本要用到~包括牛人CZZ也一样！<br>STM32 自带1-3个ADC模块，采样精度达到了12位，比起当年使用的AVR单片机的10位来说，上了个小档次了~本测试程序采用了ADCDMA的中断方式，这 样CPU就可以把ADC的任务交给DMA这个勤劳肯干的部下了，当DMA完成了一次任务之后会产生中断，告诉CPU可以来查收结果了！DMA也是在嵌入式 系统中非常常用的，例如在LCD中，数据拷贝中等。。。在STM32F103RBT6中，ADC1和ADC2共用一组管脚</p>
</blockquote>
<a id="more"></a>
<h2 id="总体编程思路和顺序如下："><a href="#总体编程思路和顺序如下：" class="headerlink" title="总体编程思路和顺序如下："></a>总体编程思路和顺序如下：</h2><pre><code>1. 初始化RCC相关，使得系统有时钟，功能模块如ADC、DMA有时钟。
2. GPIO相关初始化，比如常用的指示灯，ADC的管家要设置为输入等。
3. NVIC向量中断的配置，因为这里使用了DMA中断和中断服务程序编写（下例中暂不使用）
4. DMA配置（下例中暂不使用）
5. ADC初始化
</code></pre><h2 id="以下是参考代码，使用ADC1的IN0脚"><a href="#以下是参考代码，使用ADC1的IN0脚" class="headerlink" title="以下是参考代码，使用ADC1的IN0脚"></a>以下是参考代码，使用ADC1的IN0脚</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC_GPIO_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_ADC1,ENABLE);</span><br><span class="line">  GPIO_DeInit(GPIOA);</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin=GPIO_Pin_0;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AIN;<span class="comment">//设为模拟输入</span></span><br><span class="line">  GPIO_Init(GPIOA,&amp;GPIO_InitStructure); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADC_configuration</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ADC_InitTypeDef ADC_InitStructure;</span><br><span class="line">  ADC_InitStructure.ADC_Mode=ADC_Mode_Independent;<span class="comment">//独立模式</span></span><br><span class="line">  ADC_InitStructure.ADC_ScanConvMode=DISABLE;<span class="comment">//连续多通道模式</span></span><br><span class="line">  ADC_InitStructure.ADC_ContinuousConvMode=DISABLE;<span class="comment">//单次转换</span></span><br><span class="line">  ADC_InitStructure.ADC_ExternalTrigConv=ADC_ExternalTrigConv_None;<span class="comment">//转换由软件而不是外部触发启动</span></span><br><span class="line">  ADC_InitStructure.ADC_DataAlign=ADC_DataAlign_Right;<span class="comment">//右对齐</span></span><br><span class="line">  ADC_InitStructure.ADC_NbrOfChannel=<span class="number">1</span>;<span class="comment">//扫描通道数</span></span><br><span class="line">  ADC_Init(ADC1,&amp;ADC_InitStructure);</span><br><span class="line">  <span class="comment">//ADC_RegularChannelConfig(ADC1,ADC_Channel_0,1,ADC_SampleTime_7Cycles5);</span></span><br><span class="line">  ADC_Cmd(ADC1,ENABLE);<span class="comment">//使能或者失能指定的ADC</span></span><br><span class="line">  ADC_ResetCalibration(ADC1);<span class="comment">//重置指定的ADC的校准寄存器</span></span><br><span class="line">  <span class="keyword">while</span>(ADC_GetResetCalibrationStatus(ADC1));<span class="comment">//等待校准寄存器初始化</span></span><br><span class="line">  ADC_StartCalibration(ADC1);<span class="comment">//开始校准</span></span><br><span class="line">  <span class="keyword">while</span>(ADC_GetCalibrationStatus(ADC1));<span class="comment">//等待校准完成 </span></span><br><span class="line">  <span class="comment">//ADC_SoftwareStartConvCmd(ADC1,ENABLE);//使能指定的ADC的软件转换启动功能</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">u16 <span class="title">GetADCValue</span><span class="params">(u8 ADC_Channel)</span><span class="comment">//ADC_Channel_x 0~17</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u16 adc_value;</span><br><span class="line">  ADC_RegularChannelConfig(ADC1,ADC_Channel,<span class="number">1</span>,ADC_SampleTime_7Cycles5);</span><br><span class="line">  ADC_SoftwareStartConvCmd(ADC1,ENABLE);<span class="comment">//使能指定的ADC的软件转换启动功能</span></span><br><span class="line">  <span class="keyword">while</span>(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);<span class="comment">//检查制定ADC标志位置1与否 ADC_FLAG_EOC 转换结束标志位</span></span><br><span class="line">  adc_value=ADC_GetConversionValue(ADC1);</span><br><span class="line">  <span class="keyword">return</span> adc_value;<span class="comment">//返回最近一次ADCx规则组的转换结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当使用内部温度传感器时，需要使能温度传感器通  <code>ADC_TempSensorVrefintCmd(ENABLE);</code><br>    温度传感器通道号是ADC_Channel_16，此通道的采样时间调到最大，来保证精度；</p>
</blockquote>
<h2 id="温度的计算公式如下："><a href="#温度的计算公式如下：" class="headerlink" title="温度的计算公式如下："></a>温度的计算公式如下：</h2><p><img src="/Dom/imgs/2018_03_13/313stmADC.png" width="100%"><br>    V25、Avg_Slope的典型值分别为1.43、4.3mV/C<br>    TEMP=(1.43-Vsense)/0.0043+25;</p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>c语言</tag>
        <tag>STM32, 单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32寄存器点亮LED</title>
    <url>/2018/11/08/stm32%E5%AF%84%E5%AD%98%E5%99%A8%E7%82%B9%E4%BA%AELED/</url>
    <content><![CDATA[<h3 id="使用MED编写STM32点亮LED程序"><a href="#使用MED编写STM32点亮LED程序" class="headerlink" title="使用MED编写STM32点亮LED程序"></a>使用MED编写STM32点亮LED程序</h3><p><img src="/Dom/imgs/2018_11_11/02.png" width="40%"><br><a id="more"></a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要引入启动文件</span></span><br><span class="line"><span class="comment">// 首先找到起始地址 再 加上寄存器偏移地址，给他们写入数据即可</span></span><br><span class="line"><span class="comment">// 首先打开时钟，设置GPIO模式，配置GPIO端口数据</span></span><br><span class="line"><span class="comment">// 指针操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 时钟控制在AHB总线上 复位和时钟控制（RCC）起始地址0x4002 1000 - 0x4002 13FF</span></span><br><span class="line">    <span class="comment">// APB2外设时钟使能寄存器(RCC_APB2ENR) 偏移地址：0x18  复位值：0x0000 0000</span></span><br><span class="line">    *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)<span class="number">0x40021018</span> |= (<span class="number">1</span>&lt;&lt;<span class="number">2</span>); <span class="comment">// IOPAEN 位置一 开启GPIOA的时钟</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// GPIO端口A 寄存器映射起始地址  APB2总线设备 起始地址0x4001 0800 - 0x4001 0BFF</span></span><br><span class="line">    <span class="comment">// 端口配置寄存器，PA0~PA7在端口配置低寄存器(GPIOx_CRL) (x=A..E)  偏移地址：0x00 复位值：0x4444 4444</span></span><br><span class="line">    *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)<span class="number">0x40010800</span> |= (<span class="number">3</span>&lt;&lt;(<span class="number">4</span>*<span class="number">1</span>));  <span class="comment">// 3=0011 左移一个4位 设置PA1 推挽输出50M翻转  置位操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 端口输出数据寄存器(GPIOx_ODR) (x=A..E) 地址偏移：0Ch 复位值：0x0000 0000</span></span><br><span class="line">    *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)<span class="number">0x4001080C</span> &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">1</span>); <span class="comment">// PA1 输出，写入0 可输出数据0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// *(unsigned int *)0x4001080C ^= (1&lt;&lt;1);  // 取反操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在引入的汇编启动文件中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SystemInit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="进阶2定义自己的头文件-stm32f10x-h"><a href="#进阶2定义自己的头文件-stm32f10x-h" class="headerlink" title="进阶2定义自己的头文件 stm32f10x.h"></a>进阶2定义自己的头文件 stm32f10x.h</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STM32F10DDDx_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __STM32F10DDDx_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERIPH_BASE             ((unsigned int)0x40000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> APB1_PERIPH_BASE        PERIPH_BASE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> APB2_PERIPH_BASE        (PERIPH_BASE + 0x10000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AHB_PERIPH_BASE         (PERIPH_BASE + 0x20000)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RCC_BASE                (AHB_PERIPH_BASE + 0x1000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOA_BASE              (APB2_PERIPH_BASE + 0x0800)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define RCC_APB2ENR           *(unsigned int*)(RCC_BASE + 0x18)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define GPIOA_CRL	            *(unsigned int*)(GPIOA_BASE + 0x00)</span></span><br><span class="line"><span class="comment">//#define GPIOA_CRH             *(unsigned int*)(GPIOA_BASE + 0x04)</span></span><br><span class="line"><span class="comment">//#define GPIOA_IDR	            *(unsigned int*)(GPIOA_BASE + 0X08)</span></span><br><span class="line"><span class="comment">//#define GPIOA_ODR             *(unsigned int*)(GPIOA_BASE + 0x0C)</span></span><br><span class="line"><span class="comment">//#define GPIOA_BSRR            *(unsigned int*)(GPIOA_BASE + 0X10)</span></span><br><span class="line"><span class="comment">//#define GPIOA_BRR             *(unsigned int*)(GPIOA_BASE + 0X14)</span></span><br><span class="line"><span class="comment">//#define GPIOA_LCKR            *(unsigned int*)(GPIOA_BASE + 0x18)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> 		uint32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> short  uint16;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GPIO结构体  成员为32位</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    uint32 CRL;   <span class="comment">//  定义一个32位  4个字节的成员  刚好每个寄存器的首地址步进位4个字节  一个寄存器为32位结构</span></span><br><span class="line">    uint32 CRH;</span><br><span class="line">    uint32 IDR;</span><br><span class="line">    uint32 ODR;</span><br><span class="line">    uint32 BSRR;</span><br><span class="line">    uint32 BRR;</span><br><span class="line">    uint32 LCKR;</span><br><span class="line">&#125;GPIO_TypeDef;</span><br><span class="line"><span class="comment">// RCC结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    uint32 CR;</span><br><span class="line">    uint32 CFGR;</span><br><span class="line">    uint32 CIR;</span><br><span class="line">    uint32 APB2RSTR;</span><br><span class="line">    uint32 APB1RSTR;</span><br><span class="line">    uint32 AHBENR;</span><br><span class="line">    uint32 APB2ENR;</span><br><span class="line">    uint32 APB1ENR;</span><br><span class="line">    uint32 BDCR;</span><br><span class="line">    uint32 CSR;</span><br><span class="line">&#125;RCC_TypeDef;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOA ((GPIO_TypeDef*)GPIOA_BASE)  <span class="comment">// 强制类型转换位 GPIO_TypeDef 结构体指针类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RCC ((RCC_TypeDef*)RCC_BASE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h4 id="改动C文件"><a href="#改动C文件" class="headerlink" title="改动C文件"></a>改动C文件</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先找到起始地址 再 加上寄存器偏移地址，给他们写入数据即可</span></span><br><span class="line"><span class="comment">// 首先打开时钟，设置GPIO模式，配置GPIO端口数据</span></span><br><span class="line"><span class="comment">// 指针操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  RCC_APB2ENR |= (1 &lt;&lt; 2);</span></span><br><span class="line"><span class="comment">//  GPIOA_CRL |= (3 &lt;&lt; (4*1));</span></span><br><span class="line"><span class="comment">//  GPIOA_ODR &amp;= ~(1 &lt;&lt; 1);</span></span><br><span class="line"><span class="comment">//  while(1)&#123;</span></span><br><span class="line"><span class="comment">//      delay(500);</span></span><br><span class="line"><span class="comment">//      GPIOA_ODR ^= (1 &lt;&lt; 1);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">    RCC-&gt;APB2ENR |= (<span class="number">1</span> &lt;&lt; <span class="number">2</span>);   <span class="comment">// 置位某一位</span></span><br><span class="line">    GPIOA-&gt;CRL &amp;= ~(<span class="number">0x0f</span> &lt;&lt; (<span class="number">4</span>*<span class="number">4</span>)); <span class="comment">// 先清零  不然下面置位就会置位为  0111</span></span><br><span class="line">    GPIOA-&gt;CRL |= (<span class="number">3</span> &lt;&lt; (<span class="number">4</span>*<span class="number">4</span>));  <span class="comment">//  置位某一位</span></span><br><span class="line">    GPIOA-&gt;ODR &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">4</span>);		<span class="comment">//  清零某一位</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        delay(<span class="number">100</span>);</span><br><span class="line">        GPIOA-&gt;ODR ^= (<span class="number">1</span> &lt;&lt; <span class="number">4</span>);  <span class="comment">// 取反</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">500</span>; j++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SystemInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2018_11_11/01.png" width="100%"></p>
]]></content>
  </entry>
  <entry>
    <title>vue-monaco-editor网页嵌入编辑器</title>
    <url>/2018/04/22/vue-monaco-editor%E7%BD%91%E9%A1%B5%E5%B5%8C%E5%85%A5%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_10.png" width="40%"></p>
<h2 id="monaco-editor-web编辑器"><a href="#monaco-editor-web编辑器" class="headerlink" title="monaco-editor web编辑器"></a>monaco-editor web编辑器</h2><blockquote>
<p>monaco-editor 是微软出的一条开源web在线编辑器<br>支持多种语言，代码高亮，代码提示等功能，与Visual Studio Code 功能几乎相同。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>在项目中可能会用带代码编辑功能，或者展示代码。由于代码高亮色比较多，自己调试样式很头痛。所以在网页中嵌入monaco-editor来实现此功能</p>
</blockquote>
<h3 id="在Vue-cli中使用monaco-editor"><a href="#在Vue-cli中使用monaco-editor" class="headerlink" title="在Vue-cli中使用monaco-editor"></a>在Vue-cli中使用monaco-editor</h3><h5 id="运行vue-cli脚手架搭建"><a href="#运行vue-cli脚手架搭建" class="headerlink" title="运行vue-cli脚手架搭建"></a>运行vue-cli脚手架搭建</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init webpack myproject</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_1.png" width="40%"></p>
<h5 id="在npm上找到-vue-monaco-editor-按提示安装"><a href="#在npm上找到-vue-monaco-editor-按提示安装" class="headerlink" title="在npm上找到 vue-monaco-editor 按提示安装"></a>在npm上找到 <code>vue-monaco-editor</code> 按提示安装</h5><blockquote>
<p>–save  保存在发布环境</p>
</blockquote>
<p><a href="https://www.npmjs.com/package/vue-monaco-editor" target="_blank" rel="noopener">https://www.npmjs.com/package/vue-monaco-editor</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install vue-monaco-editor --save</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install copy-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认情况下，monaco-editor使用异步方式从cdn加载require。要使用monaco-editorwebpack 的本地副本，我们需要在构建目录中公开依赖项：</p>
</blockquote>
<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_2.png" width="40%"></p>
<h5 id="安装完成后配置-vue项目的-build-webpack-prod-conf-js-文件"><a href="#安装完成后配置-vue项目的-build-webpack-prod-conf-js-文件" class="headerlink" title="安装完成后配置 vue项目的 build/webpack.prod.conf.js 文件"></a>安装完成后配置 vue项目的 <code>build/webpack.prod.conf.js</code> 文件</h5><pre><code>在头部引入
</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_4.png" width="40%"><br>    在 <code>plugins</code>选项中引入<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复制自定义静态资源</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">//      from: path.resolve(__dirname, '../static'),</span></span><br><span class="line"><span class="comment">//      to: config.build.assetsSubDirectory,</span></span><br><span class="line"><span class="comment">//      ignore: ['.*']</span></span><br><span class="line">        <span class="keyword">from</span>: <span class="string">'node_modules/monaco-editor/min/vs'</span>,</span><br><span class="line">        to: <span class="string">'vs'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]),</span><br></pre></td></tr></table></figure></p>
<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_5.png" width="40%"></p>
<h5 id="在vue项目的组建中编写代码"><a href="#在vue项目的组建中编写代码" class="headerlink" title="在vue项目的组建中编写代码"></a>在vue项目的组建中编写代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"code_editor"</span> style=<span class="string">"height: 100%;"</span>&gt;</span><br><span class="line">  	&lt;div id=<span class="string">"language_options"</span>&gt;</span><br><span class="line">  		&lt;label&gt;语言: &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">	  	&lt;select v-model="language"&gt;</span></span><br><span class="line"><span class="regexp">			  &lt;option v-for="item in languageOptions" v-bind:value="item"&gt;</span></span><br><span class="line"><span class="regexp">			    &#123;&#123; item &#125;&#125;</span></span><br><span class="line"><span class="regexp">			  &lt;/</span>option&gt;</span><br><span class="line">			&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">  	&lt;/</span>div&gt;</span><br><span class="line">  	</span><br><span class="line">    &lt;MonacoEditor</span><br><span class="line">	    :language=<span class="string">"language"</span></span><br><span class="line">	    :code=<span class="string">"codes"</span></span><br><span class="line">	    :options=<span class="string">"options"</span></span><br><span class="line">	    :highlighted=<span class="string">"highlightLines"</span></span><br><span class="line">	    :changeThrottle=<span class="string">"500"</span></span><br><span class="line">	    theme=<span class="string">"vs-dark"</span></span><br><span class="line">	    @mounted=<span class="string">"onMounted"</span></span><br><span class="line">	    @codeChange=<span class="string">"onCodeChange"</span></span><br><span class="line">	    ref=<span class="string">"vscode"</span></span><br><span class="line">	    &gt;</span><br><span class="line">    &lt;<span class="regexp">/MonacoEditor&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">	import MonacoEditor from 'vue-monaco-editor'</span></span><br><span class="line"><span class="regexp">	export default &#123;</span></span><br><span class="line"><span class="regexp">    components: &#123;</span></span><br><span class="line"><span class="regexp">      MonacoEditor</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    props: ['codes'],</span></span><br><span class="line"><span class="regexp">    data () &#123;</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        code: '/</span><span class="regexp">/&lt;!-- Type away! --&gt;\n ',		/</span><span class="regexp">/ 代码内容</span></span><br><span class="line"><span class="regexp">        language: 'typescript',	 /</span><span class="regexp">/语言	</span></span><br><span class="line"><span class="regexp">        languageOptions: [</span></span><br><span class="line"><span class="regexp">        	'typescript','javascript','html','css','bat','c',</span></span><br><span class="line"><span class="regexp">        	'coffeescript','cpp','csharp','csp','dockerfile',</span></span><br><span class="line"><span class="regexp">        	'fsharp','go','handlebars','ini','java','json','less',</span></span><br><span class="line"><span class="regexp">        	'lua','markdown','msdax','mysql','objective-c','pgsql',</span></span><br><span class="line"><span class="regexp">        	'php','plaintext','postiats','powershell','pug','python',</span></span><br><span class="line"><span class="regexp">        	'r','razor','redis','redshift','ruby','rust','sb','scss',</span></span><br><span class="line"><span class="regexp">        	'sol','sql','swift','vb','xml','yaml'</span></span><br><span class="line"><span class="regexp">        ],</span></span><br><span class="line"><span class="regexp">        highlightLines: [&#123; number: 0, class: 'red'&#125;],  /</span><span class="regexp">/高亮</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/      theme: ['vs', 'hc-black', 'vs-dark']  /</span><span class="regexp">/ 编辑器样式</span></span><br><span class="line"><span class="regexp">        options: &#123;		/</span><span class="regexp">/选项</span></span><br><span class="line"><span class="regexp">          selectOnLineNumbers: false,</span></span><br><span class="line"><span class="regexp">				  roundedSelection: false,</span></span><br><span class="line"><span class="regexp">				  readOnly: false,		/</span><span class="regexp">/ 只读</span></span><br><span class="line"><span class="regexp">				  cursorStyle: 'line',		/</span><span class="regexp">/光标样式</span></span><br><span class="line"><span class="regexp">				  automaticLayout: false,	/</span><span class="regexp">/自动布局</span></span><br><span class="line"><span class="regexp">				  glyphMargin: true,  /</span><span class="regexp">/字形边缘</span></span><br><span class="line"><span class="regexp">				  useTabStops: false</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/				  fontSize: 20,		/</span><span class="regexp">/字体大小</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/				  quickSuggestionsDelay: 500,	/</span><span class="regexp">/代码提示延时</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        newCode: '',</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    watch: &#123;</span></span><br><span class="line"><span class="regexp">    	/</span><span class="regexp">/  更换语言的时候需要延时后 再销毁并创建</span></span><br><span class="line"><span class="regexp">    	language(newLanguage,oldLanguage)&#123;</span></span><br><span class="line"><span class="regexp">    		this.reload();</span></span><br><span class="line"><span class="regexp">    	&#125;,</span></span><br><span class="line"><span class="regexp">    	/</span><span class="regexp">/ code 父组件传递的 code发生变化就需要重载一次</span></span><br><span class="line"><span class="regexp">    	codes(a,b)&#123;</span></span><br><span class="line"><span class="regexp">				this.reload();</span></span><br><span class="line"><span class="regexp">    	&#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/编辑器挂载时触发</span></span><br><span class="line"><span class="regexp">      onMounted(editor) &#123;</span></span><br><span class="line"><span class="regexp">	      console.log('after mount!', editor, editor.getValue(), editor.getModel());</span></span><br><span class="line"><span class="regexp">	      this.editor = editor;</span></span><br><span class="line"><span class="regexp">	    &#125;,</span></span><br><span class="line"><span class="regexp">	    /</span><span class="regexp">/代码发生变化时触发</span></span><br><span class="line"><span class="regexp">	    onCodeChange(editor) &#123;</span></span><br><span class="line"><span class="regexp">	      console.log('code changed!', 'code:' + this.editor.getValue());</span></span><br><span class="line"><span class="regexp">	    &#125;,</span></span><br><span class="line"><span class="regexp">	    clickHandler() &#123;</span></span><br><span class="line"><span class="regexp">	      console.log('here is the code:', this.editor.getValue());</span></span><br><span class="line"><span class="regexp">	    &#125;,</span></span><br><span class="line"><span class="regexp">	    /</span><span class="regexp">/ 获取代码</span></span><br><span class="line"><span class="regexp">	    getcodevalue()&#123;</span></span><br><span class="line"><span class="regexp">	    	return this.editor.getValue();</span></span><br><span class="line"><span class="regexp">	    &#125;,</span></span><br><span class="line"><span class="regexp">	    getlanguage()&#123;</span></span><br><span class="line"><span class="regexp">	    	return this.language;</span></span><br><span class="line"><span class="regexp">	    &#125;,</span></span><br><span class="line"><span class="regexp">	    /</span><span class="regexp">/ 重载编辑框</span></span><br><span class="line"><span class="regexp">	    reload()&#123;</span></span><br><span class="line"><span class="regexp">	    	clearTimeout(time);</span></span><br><span class="line"><span class="regexp">    		let time = setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">		    	this.$refs.vscode.destroyMonaco();   /</span><span class="regexp">/ 销毁</span></span><br><span class="line"><span class="regexp">	 				this.$refs.vscode.createMonaco();		/</span><span class="regexp">/ 创建</span></span><br><span class="line"><span class="regexp">	 			&#125;, 600);</span></span><br><span class="line"><span class="regexp">	    &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add <span class="string">"scoped"</span> attribute to limit CSS to <span class="keyword">this</span> component only --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">	.code_editor #language_options&#123;</span><br><span class="line">		padding: <span class="number">16</span>px;</span><br><span class="line">	&#125;</span><br><span class="line">	.code_editor #language_options select&#123;</span><br><span class="line">		height: <span class="number">33</span>px;</span><br><span class="line">		width: <span class="number">20</span>%;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_6.png" width="40%"></p>
<h5 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时会报错 提示没有es2015编译器</p>
</blockquote>
<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_7.png" width="40%"></p>
<h5 id="安装-es2015-保存在开发环境"><a href="#安装-es2015-保存在开发环境" class="headerlink" title="安装 es2015 保存在开发环境"></a>安装 es2015 保存在开发环境</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install  babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_8.png" width="40%"></p>
<h5 id="运行项目-1"><a href="#运行项目-1" class="headerlink" title="运行项目"></a>运行项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2018_04_22/vue-monaco-editor_10.png" width="40%"></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>以前简单个人主页，部分内容在里里面</title>
    <url>/2018/03/12/%E4%BB%A5%E5%89%8D%E7%AE%80%E5%8D%95%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%EF%BC%8C%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E5%9C%A8%E9%87%8C%E9%87%8C%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="老版本个人静态页面地址-https-idrnyu-github-io-idrnyu1"><a href="#老版本个人静态页面地址-https-idrnyu-github-io-idrnyu1" class="headerlink" title="老版本个人静态页面地址   https://idrnyu.github.io/idrnyu1/"></a><a href="https://idrnyu.github.io/idrnyu1/" target="_blank" rel="noopener">老版本个人静态页面地址</a>   <a href="https://idrnyu.github.io/idrnyu1/" target="_blank" rel="noopener">https://idrnyu.github.io/idrnyu1/</a></h2>]]></content>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cordova打包vue-cli构建的项目为APP配置</title>
    <url>/2018/03/12/%E4%BD%BF%E7%94%A8Cordova%E6%89%93%E5%8C%85vue-cli%E6%9E%84%E5%BB%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%BAAPP%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/Dom/imgs/2018_03_12/c4.jpg" width="15%"></p>
<h2 id="Cordova-打包-Vue-cli-项目配置"><a href="#Cordova-打包-Vue-cli-项目配置" class="headerlink" title="Cordova 打包 Vue-cli 项目配置"></a>Cordova 打包 Vue-cli 项目配置</h2><blockquote>
<p>Vue-cli 搭建出来的基于 <code>weipack</code> 的Vue项目，</p>
</blockquote>
<hr>
<a id="more"></a>
<h2 id="配置-index-html-中的-head-中的-meta-标签"><a href="#配置-index-html-中的-head-中的-meta-标签" class="headerlink" title="配置 index.html 中的 head 中的 meta 标签"></a>配置 index.html 中的 head 中的 meta 标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;meta http-equiv="Content-Security-Policy" content="default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *; img-src 'self' data: content:;"&gt; 可选项--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置-index-html-中引入Cordova"><a href="#配置-index-html-中引入Cordova" class="headerlink" title="配置 index.html 中引入Cordova"></a>配置 index.html 中引入Cordova</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"cordova.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="如下图-1-配置-index-html-文件"><a href="#如下图-1-配置-index-html-文件" class="headerlink" title="如下图 1 配置 index.html 文件:"></a>如下图 1 配置 index.html 文件:</h3><p><img src="/Dom/imgs/2018_03_12/c1.png" width="100%"></p>
<h2 id="配置-main-js-文件"><a href="#配置-main-js-文件" class="headerlink" title="配置 main.js 文件"></a>配置 main.js 文件</h2><p><code>在 项目目录下 src/main.js 中插入代码如下</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于判断运行环境，好用于调试</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'ontouchstart'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    router.start(App, <span class="string">'#app'</span>); <span class="comment">//启动路由</span></span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  router.start(App, <span class="string">'#app'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="如下图-2-配置-main-js-文件"><a href="#如下图-2-配置-main-js-文件" class="headerlink" title="如下图 2 配置 main.js 文件:"></a>如下图 2 配置 main.js 文件:</h3><p><img src="/Dom/imgs/2018_03_12/c2.png" width="100%"></p>
<h2 id="配置-config-index-js-文件"><a href="#配置-config-index-js-文件" class="headerlink" title="配置 config/index.js 文件"></a>配置 config/index.js 文件</h2><p><code>在 项目目录下 config/index.js 中修改代码如下</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Template for index.html</span></span><br><span class="line">index: path.resolve(__dirname, <span class="string">'../www/index.html'</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">// Paths</span></span><br><span class="line">assetsRoot: path.resolve(__dirname, <span class="string">'../www'</span>),</span><br><span class="line">assetsSubDirectory: <span class="string">''</span>,</span><br><span class="line">assetsPublicPath: <span class="string">'./'</span>,</span><br></pre></td></tr></table></figure></p>
<h3 id="如下图-3-配置-index-js-文件"><a href="#如下图-3-配置-index-js-文件" class="headerlink" title="如下图 3 配置 index.js 文件:"></a>如下图 3 配置 index.js 文件:</h3><p><img src="/Dom/imgs/2018_03_12/c3.png" width="100%"></p>
<pre><code>使用 npm run build 打包后 将生成的 www 文件替换 Cordova 项目中的 www 文件夹
</code></pre><h2 id="效果图1："><a href="#效果图1：" class="headerlink" title="效果图1："></a>效果图1：</h2><p><img src="/Dom/imgs/2018_03_12/c4.jpg" width="15%"></p>
<h2 id="效果图2："><a href="#效果图2：" class="headerlink" title="效果图2："></a>效果图2：</h2><p><img src="/Dom/imgs/2018_03_12/c5.jpg" width="50%"></p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Cordova</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
        <tag>Vue</tag>
        <tag>Cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>学习搭建个人博客</title>
    <url>/2017/06/28/%E5%AD%A6%E4%B9%A0%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<!-- ![](https://pandao.github.io/editor.md/examples/images/4.jpg) -->
<p><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" width="30%"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>这个需要使用c进行截断，&lt;!-- more --&gt;上面的内容就是显示在主页的摘要，把图片放在&lt;!-- more --&gt;上面就可以了。</code></p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="https-pandao-github-io-editor-md-在线md编辑器-比较好用"><a href="#https-pandao-github-io-editor-md-在线md编辑器-比较好用" class="headerlink" title="https://pandao.github.io/editor.md/  在线md编辑器  比较好用"></a><a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener">https://pandao.github.io/editor.md/</a>  在线md编辑器  比较好用</h2><blockquote>
<p>Hexo 是一个基于nodejs 的静态博客网站生成器，作者是来自台湾的 Tommy Chen</p>
</blockquote>
<blockquote>
<p><a href="https://www.jianshu.com/p/380290deb8f0" target="_blank" rel="noopener">https://www.jianshu.com/p/380290deb8f0</a>  学习搭建  但是在构建的时候有问题</p>
</blockquote>
<blockquote>
<p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a> 使用这个构建</p>
</blockquote>
<blockquote>
<p><a href="https://www.jianshu.com/p/61987cec0fad#" target="_blank" rel="noopener">https://www.jianshu.com/p/61987cec0fad#</a>  这个也可以构建</p>
</blockquote>
<blockquote>
<p><a href="https://www.jianshu.com/p/4fbc57269f1b" target="_blank" rel="noopener">https://www.jianshu.com/p/4fbc57269f1b</a>   修改底部样式和文字</p>
</blockquote>
<blockquote>
<p><a href="http://tc9011.com/2017/02/02/hexo文章添加版权声明及一些特效/" target="_blank" rel="noopener">http://tc9011.com/2017/02/02/hexo文章添加版权声明及一些特效/</a></p>
</blockquote>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><blockquote>
<p><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">https://www.cnblogs.com/visugar/p/6821777.html</a></p>
</blockquote>
<blockquote>
<p>换电脑后  从git拉下来后  依次执行 npm install hexo、npm install、npm install hexo-deployer-git</p>
</blockquote>
<blockquote>
<p>主题文件可能会丢失   git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>
</blockquote>
<blockquote>
<p><a href="http://blog.csdn.net/ESA_DSQ/article/details/78604943" target="_blank" rel="noopener">http://blog.csdn.net/ESA_DSQ/article/details/78604943</a></p>
</blockquote>
<blockquote>
<p><a href="http://blog.csdn.net/jiaqiangbandongg/article/details/77151699" target="_blank" rel="noopener">http://blog.csdn.net/jiaqiangbandongg/article/details/77151699</a>     添加小功能</p>
</blockquote>
<blockquote>
<p><a href="https://www.jianshu.com/p/5888bd91d070?open_source=weibo_search" target="_blank" rel="noopener">https://www.jianshu.com/p/5888bd91d070?open_source=weibo_search</a></p>
</blockquote>
<blockquote>
<p>添加评论 <a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009544924</a>  添加多功能</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure>
<p>也可以一次性执行<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
<blockquote>
<p>hexo s 运行代码</p>
</blockquote>
<p>需要ssh配置   完后需要输入<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "idrnyu"</span><br><span class="line">git config --global user.email "834999326@qq.com"</span><br></pre></td></tr></table></figure></p>
<p>使用  ssh 提交的话<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git@github.com:idrnyu/idrnyu.github.io.git  中间的:需要修改为/</span><br><span class="line">git@github.com/idrnyu/idrnyu.github.io.git</span><br></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>Local Search 由 flashlab 贡献<br>添加百度/谷歌/本地 自定义站点内容搜索</p>
</blockquote>
<p><code>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>
<p>编辑 <strong>站点配置文件</strong>，新增以下内容到任意位置：</p>
<pre><code>search:
    path: search.xml
    field: post
    format: html
    limit: 10000
</code></pre><p>编辑 <strong>主题配置文件</strong>，启用本地搜索功能：</p>
<pre><code># Local search
    local_search:
    enable: true
</code></pre>]]></content>
      <categories>
        <category>实用技术</category>
      </categories>
      <tags>
        <tag>实用</tag>
      </tags>
  </entry>
  <entry>
    <title>荔枝派_buildroot文件系统编译</title>
    <url>/2022/05/16/%E8%8D%94%E6%9E%9D%E6%B4%BE-buildroot%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h1 id="一、-获取buildroot文件系统源码"><a href="#一、-获取buildroot文件系统源码" class="headerlink" title="一、 获取buildroot文件系统源码"></a>一、 获取buildroot文件系统源码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://buildroot.org/downloads/buildroot-2019.08.tar.gz  <span class="comment"># 下载源码</span></span><br><span class="line">tar xvf buildroot-2019.08.tar.gz  <span class="comment"># 解压</span></span><br><span class="line"><span class="built_in">cd</span> buildroot-2019.08</span><br></pre></td></tr></table></figure>
<h1 id="二、-配置buildroot"><a href="#二、-配置buildroot" class="headerlink" title="二、 配置buildroot"></a>二、 配置buildroot</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig  <span class="comment"># 配置buildroot文件系统</span></span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_05_16/menuconfig.png" alt="menuconfig"></p>
<a id="more"></a>
<p>配置 <code>Target options --&gt;</code> 设置目标芯片 配置如下</p>
<p><img src="/Dom/imgs/2022_05_16/menuconfigTarget.png" alt="menuconfigTarget"></p>
<p>配置 <code>Toolchain --&gt;</code> 设置编译工具链</p>
<p>首先需要查看编译工具链所在目录和编译工具链的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> arm-linux-gnueabihf-gcc  <span class="comment"># 查看编译工具所在目录</span></span><br><span class="line"></span><br><span class="line">vim /opt/gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/libc/usr/include/linux/version.h  <span class="comment"># 查看编译工具版本号</span></span><br><span class="line"><span class="comment"># 263680的二进制为0x40600，则对应的内核版本号为4.6.0。</span></span><br></pre></td></tr></table></figure>
<p>配置目标如下</p>
<p><img src="/Dom/imgs/2022_05_16/menuconfigToolchain.png" alt="menuconfigToolchain"></p>
<h1 id="三、-编译buildroot"><a href="#三、-编译buildroot" class="headerlink" title="三、 编译buildroot"></a>三、 编译buildroot</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time make <span class="comment"># 编译buildroot 此过程需要半个小时左右</span></span><br></pre></td></tr></table></figure>
<p>编译完成后，生成的文件系统在 <code>output/images/rootfs.tar</code></p>
]]></content>
  </entry>
  <entry>
    <title>荔枝派_SPI-Flash烧录</title>
    <url>/2022/05/16/%E8%8D%94%E6%9E%9D%E6%B4%BE-SPI-Flash%E7%83%A7%E5%BD%95/</url>
    <content><![CDATA[<p>烧录 <code>uboot</code> <code>Linux主线Kernel</code> <code>buildroot文件系统</code> 到 全志v3s；参考往期内容；</p>
<p><a href="//2022/03/12/荔枝派-u-boot编译/">荔枝派-u-boot编译</a></p>
<p><a href="//2022/05/15/荔枝派-linux内核编译/">荔枝派-linux内核编译</a></p>
<p><a href="//2022/05/16/荔枝派-buildroot文件系统编译/">荔枝派-buildroot文件系统编译</a></p>
<h1 id="一、-准备烧录文件"><a href="#一、-准备烧录文件" class="headerlink" title="一、 准备烧录文件"></a>一、 准备烧录文件</h1><ol>
<li>uboot编译后的产物：<code>u-boot-sunxi-with-spl.bin</code>;</li>
<li>linux内核编译后的产物：<code>arch/arm/boot/zImage</code> 和 <code>arch/arm/boot/dts/sun8i-v3s-licheepi-zero.dtb</code>;</li>
<li>buildroot根文件系统编译后的产物：<code>output/images/rootfs.tar</code>;</li>
</ol>
<p>将4个文件放在一个文件夹下 如 v0.1</p>
<h1 id="二、-将根文件系统生成jffs2-img"><a href="#二、-将根文件系统生成jffs2-img" class="headerlink" title="二、 将根文件系统生成jffs2.img"></a>二、 将根文件系统生成jffs2.img</h1><p>使用使用各种文件系统生成工具生成的文件系统文件一般都类似是： <code>rootfs.tar</code> 的压缩包文件，这个是无法没有办法适应nor flash的需要使用转换的工具软件转成类似<code>jffs2.img</code>的文件。</p>
<p>安装 jffs2 文件系统制作工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mtd-utils</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>解压rootfs文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir rootfs</span><br><span class="line">tar vxf rootfs.tar -C rootfs</span><br></pre></td></tr></table></figure>
<p>使用命令生成：<br>这里使用的是16M的flash所以<code>-p</code>后面需要填的值即文件系统的空间为：16M-1M-64K-4M=0xAF 0000</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.jffs2 -s 0x100 -e 0x10000 -p 0xAF0000 -d rootfs/ -o jffs2.img</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>-s</code> 页大小0x100 即：256Byte (可选选项)</li>
<li><code>-e</code> 块大小0x10000 即：64KByte (可选选项)</li>
<li><code>-p</code> 十六进制表示输出的文件大小即文件系统的大小</li>
<li><code>-d</code> 要做成img的源文件夹</li>
<li>jffs2分区总空间0xAF0000 即：10MB 又 960KB</li>
<li>jffs2.img是生成的文件系统镜像。</li>
</ul>
</blockquote>
<p>生成后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rw-r--r--  1 gongyu gongyu 5.0M 5月  15 21:37 jffs2.img</span><br></pre></td></tr></table></figure>
<h1 id="三、-打包二进制包：flashimg-bin"><a href="#三、-打包二进制包：flashimg-bin" class="headerlink" title="三、 打包二进制包：flashimg.bin"></a>三、 打包二进制包：flashimg.bin</h1><blockquote>
<ul>
<li>第一步： 生成一个空文件名字为flashimg.bin，大小是32MB或者是16MB</li>
<li>第二步： 将uboot添加到文件开头</li>
<li>第三步： 将dtb放到1M偏移处</li>
<li>第四步： 将kernel放到1M+64K偏移处</li>
<li>第五步： 将rootfs放到1M+64K+4M偏移处</li>
</ul>
</blockquote>
<p>偏移大小是seek，单位是KB。</p>
<p>16M Flash 打包脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero of=flashimg.bin bs=1M count=16</span><br><span class="line">dd <span class="keyword">if</span>=u-boot-sunxi-with-spl.bin of=flashimg.bin bs=1K conv=notrunc</span><br><span class="line">dd <span class="keyword">if</span>=sun8i-v3s-licheepi-zero.dtb of=flashimg.bin bs=1K seek=1024  conv=notrunc</span><br><span class="line">dd <span class="keyword">if</span>=zImage of=flashimg.bin bs=1K seek=1088  conv=notrunc</span><br><span class="line">dd <span class="keyword">if</span>=jffs2.img of=flashimg.bin  bs=1K seek=5184  conv=notrunc</span><br></pre></td></tr></table></figure>
<p>32M Flash 打包脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">dd if=/dev/zero of=flashimg.bin bs=1M count=$1</span><br><span class="line">dd if=u-boot-sunxi-with-spl-$2.bin of=flashimg.bin bs=1K conv=notrunc</span><br><span class="line">dd if=sun8i-v3s-licheepi-zero-$2.dtb of=flashimg.bin bs=1K seek=1024  conv=notrunc</span><br><span class="line">dd if=zImage of=flashimg.bin bs=1K seek=1088  conv=notrunc</span><br><span class="line">dd if=jffs2.img of=flashimg.bin  bs=1K seek=5184  conv=notrunc</span><br></pre></td></tr></table></figure>
<p>将对应的打包脚本命名并指定运行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim bin.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 16M Flash 打包脚本 保存并退出</span></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">chmod 777 bin.sh  <span class="comment"># 给予权限</span></span><br><span class="line"></span><br><span class="line">./bin.sh <span class="comment"># 运行脚本</span></span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_05_16/buildBin.png" alt="buildBin"></p>
<p>烧录bin到 v3s</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gongyu@gongyu-VirtualBox:~/Lichee_Pi/v1.1$ sudo sunxi-fel -p spiflash-write 0 flashimg.bin</span><br><span class="line">100% [================================================] 16777 kB,   82.3 kB/s</span><br></pre></td></tr></table></figure>
<p>烧录成功后重新重新上电板子 打开串口即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo minicom -s <span class="comment"># 配置串口</span></span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_05_16/minicom.png" alt="minicom"><br><img src="/Dom/imgs/2022_05_16/setminicom.png" alt="setminicom"></p>
<p>运行结果如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome to minicom 2.7</span><br><span class="line"></span><br><span class="line">OPTIONS: I18n</span><br><span class="line">Compiled on Apr 22 2017, 09:14:19.</span><br><span class="line">Port /dev/ttyUSB0</span><br><span class="line"></span><br><span class="line">Press CTRL-A Z <span class="keyword">for</span> <span class="built_in">help</span> on special keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">U-Boot SPL 2017.01-rc2-00073-gdd6e8740dc-dirty (May 15 2022 - 18:46:47)</span><br><span class="line">DRAM: 64 MiB</span><br><span class="line">Trying to boot from sunxi SPI</span><br><span class="line"></span><br><span class="line">U-Boot 2017.01-rc2-00073-gdd6e8740dc-dirty (May 15 2022 - 18:46:47 +0800) Allwinner Technology</span><br><span class="line"></span><br><span class="line">CPU:   Allwinner V3s (SUN8I 1681)</span><br><span class="line">Model: Lichee Pi Zero</span><br><span class="line">DRAM:  64 MiB</span><br><span class="line">MMC:   SUNXI SD/MMC: 0</span><br><span class="line">SF: Detected xt25f128b with page size 256 Bytes, erase size 4 KiB, total 16 MiB</span><br><span class="line">*** Warning - bad CRC, using default environment</span><br><span class="line"></span><br><span class="line">Setting up a 800x480 lcd console (overscan 0x0)</span><br><span class="line">dotclock: 33000kHz = 33000kHz: (1 * 3MHz * 66) / 6</span><br><span class="line">In:    serial@01c28000</span><br><span class="line">Out:   serial@01c28000</span><br><span class="line">Err:   serial@01c28000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">U-Boot 2017.01-rc2-00073-gdd6e8740dc-dirty (May 15 2022 - 18:46:47 +0800) Allwinner Technology</span><br><span class="line"></span><br><span class="line">CPU:   Allwinner V3s (SUN8I 1681)</span><br><span class="line">Model: Lichee Pi Zero</span><br><span class="line">DRAM:  64 MiB</span><br><span class="line">MMC:   SUNXI SD/MMC: 0</span><br><span class="line">SF: Detected xt25f128b with page size 256 Bytes, erase size 4 KiB, total 16 MiB</span><br><span class="line">*** Warning - bad CRC, using default environment</span><br><span class="line"></span><br><span class="line">Setting up a 800x480 lcd console (overscan 0x0)</span><br><span class="line">dotclock: 33000kHz = 33000kHz: (1 * 3MHz * 66) / 6</span><br><span class="line">In:    serial@01c28000</span><br><span class="line">Out:   serial@01c28000</span><br><span class="line">Err:   serial@01c28000</span><br><span class="line">Net:   No ethernet found.</span><br><span class="line">starting USB...</span><br><span class="line">No controllers found</span><br><span class="line">Hit any key to stop autoboot:  0</span><br><span class="line">SF: Detected xt25f128b with page size 256 Bytes, erase size 4 KiB, total 16 MiB</span><br><span class="line">device 0 offset 0x100000, size 0x10000</span><br><span class="line">SF: 65536 bytes @ 0x100000 Read: OK</span><br><span class="line">device 0 offset 0x110000, size 0x400000</span><br><span class="line">SF: 4194304 bytes @ 0x110000 Read: OK</span><br><span class="line"><span class="comment">## Flattened Device Tree blob at 41800000</span></span><br><span class="line">   Booting using the fdt blob at 0x41800000</span><br><span class="line">   Loading Device Tree to 42dfa000, end 42dffc30 ... OK</span><br><span class="line"></span><br><span class="line">Starting kernel ...</span><br><span class="line"></span><br><span class="line">[    0.000000] Booting Linux on physical CPU 0x0</span><br><span class="line">[    0.000000] Linux version 4.13.16-licheepi-zero+ (gongyu@gongyu-VirtualBox) (gcc version 6.3.1 20170404 (Linaro GCC 6.3-2017.05)) <span class="comment">#3 SMP Sun M2</span></span><br><span class="line">[    0.000000] CPU: ARMv7 Processor [410fc075] revision 5 (ARMv7), cr=10c5387d</span><br><span class="line">[    0.000000] CPU: div instructions available: patching division code</span><br><span class="line">[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT aliasing instruction cache</span><br><span class="line">[    0.000000] OF: fdt: Machine model: Lichee Pi Zero</span><br><span class="line">[    0.000000] Memory policy: Data cache writealloc</span><br><span class="line">[    0.000000] percpu: Embedded 16 pages/cpu @c3de6000 s33868 r8192 d23476 u65536</span><br><span class="line">[    0.000000] Built 1 zonelists <span class="keyword">in</span> Zone order, mobility grouping on.  Total pages: 15883</span><br><span class="line">[    0.000000] Kernel <span class="built_in">command</span> line: console=ttyS0,115200 earlyprintk panic=5 rootwait mtdparts=spi32766.0:1M(uboot)ro,64k(dtb)ro,4M(kernel)ro,-(r2</span><br><span class="line">[    0.000000] PID <span class="built_in">hash</span> table entries: 256 (order: -2, 1024 bytes)</span><br><span class="line">[    0.000000] Dentry cache <span class="built_in">hash</span> table entries: 8192 (order: 3, 32768 bytes)</span><br><span class="line">[    0.000000] Inode-cache <span class="built_in">hash</span> table entries: 4096 (order: 2, 16384 bytes)</span><br><span class="line">[    0.000000] Memory: 53584K/64036K available (6144K kernel code, 217K rwdata, 1456K rodata, 1024K init, 264K bss, 10452K reserved, 0K cma-reser)</span><br><span class="line">[    0.000000] Virtual kernel memory layout:</span><br><span class="line">[    0.000000]     vector  : 0xffff0000 - 0xffff1000   (   4 kB)</span><br><span class="line">[    0.000000]     fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)</span><br><span class="line">[    0.000000]     vmalloc : 0xc4000000 - 0xff800000   ( 952 MB)</span><br><span class="line">[    0.000000]     lowmem  : 0xc0000000 - 0xc3e89000   (  62 MB)</span><br><span class="line">[    0.000000]     pkmap   : 0xbfe00000 - 0xc0000000   (   2 MB)</span><br><span class="line">[    0.000000]     modules : 0xbf000000 - 0xbfe00000   (  14 MB)</span><br><span class="line">[    0.000000]       .text : 0xc0008000 - 0xc0700000   (7136 kB)</span><br><span class="line">[    0.000000]       .init : 0xc0900000 - 0xc0a00000   (1024 kB)</span><br><span class="line">[    0.000000]       .data : 0xc0a00000 - 0xc0a367c0   ( 218 kB)</span><br><span class="line">[    0.000000]        .bss : 0xc0a3daf0 - 0xc0a7fcac   ( 265 kB)</span><br><span class="line">[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1</span><br><span class="line">[    0.000000] Hierarchical RCU implementation.</span><br><span class="line">[    0.000000]  RCU event tracing is enabled.</span><br><span class="line">[    0.000000]  RCU restricting CPUs from NR_CPUS=8 to nr_cpu_ids=1.</span><br><span class="line">[    0.000000] RCU: Adjusting geometry <span class="keyword">for</span> rcu_fanout_leaf=16, nr_cpu_ids=1</span><br><span class="line">[    0.000000] NR_IRQS: 16, nr_irqs: 16, preallocated irqs: 16</span><br><span class="line">[    0.000000] arch_timer: cp15 timer(s) running at 24.00MHz (virt).</span><br><span class="line">[    0.000000] clocksource: arch_sys_counter: mask: 0xffffffffffffff max_cycles: 0x588fe9dc0, max_idle_ns: 440795202592 ns</span><br><span class="line">[    0.000009] sched_clock: 56 bits at 24MHz, resolution 41ns, wraps every 4398046511097ns</span><br><span class="line">[    0.000021] Switching to timer-based delay loop, resolution 41ns</span><br><span class="line">[    0.000185] clocksource: timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 79635851949 ns</span><br><span class="line">[    0.000409] Console: colour dummy device 80x30</span><br><span class="line">[    0.000447] Calibrating delay loop (skipped), value calculated using timer frequency.. 48.00 BogoMIPS (lpj=240000)</span><br><span class="line">[    0.000462] pid_max: default: 32768 minimum: 301</span><br><span class="line">[    0.000591] Mount-cache <span class="built_in">hash</span> table entries: 1024 (order: 0, 4096 bytes)</span><br><span class="line">[    0.000607] Mountpoint-cache <span class="built_in">hash</span> table entries: 1024 (order: 0, 4096 bytes)</span><br><span class="line">[    0.001201] CPU: Testing write buffer coherency: ok</span><br><span class="line">[    0.001571] /cpus/cpu@0 missing clock-frequency property</span><br><span class="line">[    0.001594] CPU0: thread -1, cpu 0, socket 0, mpidr 80000000</span><br><span class="line">[    0.002022] Setting up static identity map <span class="keyword">for</span> 0x40100000 - 0x40100060</span><br><span class="line">[    0.002208] Hierarchical SRCU implementation.</span><br><span class="line">[    0.002727] smp: Bringing up secondary CPUs ...</span><br><span class="line">[    0.002740] smp: Brought up 1 node, 1 CPU</span><br><span class="line">[    0.002749] SMP: Total of 1 processors activated (48.00 BogoMIPS).</span><br><span class="line">[    0.002756] CPU: All CPU(s) started <span class="keyword">in</span> SVC mode.</span><br><span class="line">[    0.003517] devtmpfs: initialized</span><br><span class="line">[    0.006545] VFP support v0.3: implementor 41 architecture 2 part 30 variant 7 rev 5</span><br><span class="line">[    0.006807] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns</span><br><span class="line">[    0.006839] futex <span class="built_in">hash</span> table entries: 256 (order: 2, 16384 bytes)</span><br><span class="line">[    0.007006] pinctrl core: initialized pinctrl subsystem</span><br><span class="line">[    0.007883] random: get_random_u32 called from bucket_table_alloc+0xf4/0x244 with crng_init=0</span><br><span class="line">[    0.008014] NET: Registered protocol family 16</span><br><span class="line">[    0.008504] DMA: preallocated 256 KiB pool <span class="keyword">for</span> atomic coherent allocations</span><br><span class="line">[    0.009612] hw-breakpoint: found 5 (+1 reserved) breakpoint and 4 watchpoint registers.</span><br><span class="line">[    0.009629] hw-breakpoint: maximum watchpoint size is 8 bytes.</span><br><span class="line">[    0.022177] SCSI subsystem initialized</span><br><span class="line">[    0.022469] usbcore: registered new interface driver usbfs</span><br><span class="line">[    0.022535] usbcore: registered new interface driver hub</span><br><span class="line">[    0.022631] usbcore: registered new device driver usb</span><br><span class="line">[    0.022870] pps_core: LinuxPPS API ver. 1 registered</span><br><span class="line">[    0.022882] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;</span><br><span class="line">[    0.022905] PTP clock support registered</span><br><span class="line">[    0.023130] Advanced Linux Sound Architecture Driver Initialized.</span><br><span class="line">[    0.024937] clocksource: Switched to clocksource arch_sys_counter</span><br><span class="line">[    0.035847] NET: Registered protocol family 2</span><br><span class="line">[    0.036437] TCP established <span class="built_in">hash</span> table entries: 1024 (order: 0, 4096 bytes)</span><br><span class="line">[    0.036470] TCP <span class="built_in">bind</span> <span class="built_in">hash</span> table entries: 1024 (order: 1, 8192 bytes)</span><br><span class="line">[    0.036494] TCP: Hash tables configured (established 1024 <span class="built_in">bind</span> 1024)</span><br><span class="line">[    0.036622] UDP <span class="built_in">hash</span> table entries: 256 (order: 1, 8192 bytes)</span><br><span class="line">[    0.036672] UDP-Lite <span class="built_in">hash</span> table entries: 256 (order: 1, 8192 bytes)</span><br><span class="line">[    0.036913] NET: Registered protocol family 1</span><br><span class="line">[    0.037502] RPC: Registered named UNIX socket transport module.</span><br><span class="line">[    0.037520] RPC: Registered udp transport module.</span><br><span class="line">[    0.037525] RPC: Registered tcp transport module.</span><br><span class="line">[    0.037531] RPC: Registered tcp NFSv4.1 backchannel transport module.</span><br><span class="line">[    0.039598] workingset: timestamp_bits=30 max_order=14 bucket_order=0</span><br><span class="line">[    0.048527] NFS: Registering the id_resolver key <span class="built_in">type</span></span><br><span class="line">[    0.048579] Key <span class="built_in">type</span> id_resolver registered</span><br><span class="line">[    0.048586] Key <span class="built_in">type</span> id_legacy registered</span><br><span class="line">[    0.048630] jffs2: version 2.2. (NAND) Â© 2001-2006 Red Hat, Inc.</span><br><span class="line">[    0.050156] random: fast init <span class="keyword">done</span></span><br><span class="line">[    0.053011] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 249)</span><br><span class="line">[    0.053031] io scheduler noop registered</span><br><span class="line">[    0.053039] io scheduler deadline registered</span><br><span class="line">[    0.053310] io scheduler cfq registered (default)</span><br><span class="line">[    0.053322] io scheduler mq-deadline registered</span><br><span class="line">[    0.053329] io scheduler kyber registered</span><br><span class="line">[    0.057685] sun8i-v3s-pinctrl 1c20800.pinctrl: initialized sunXi PIO driver</span><br><span class="line">[    0.126907] Serial: 8250/16550 driver, 8 ports, IRQ sharing disabled</span><br><span class="line">[    0.130262] console [ttyS0] disabled</span><br><span class="line">[    0.150544] 1c28000.serial: ttyS0 at MMIO 0x1c28000 (irq = 33, base_baud = 1500000) is a U6_16550A</span><br><span class="line">[    0.739727] console [ttyS0] enabled</span><br><span class="line">[    0.747572] m25p80 spi32766.0: xt25f128b (16384 Kbytes)</span><br><span class="line">[    0.752833] spi32766.0: parser cmdlinepart: 4</span><br><span class="line">[    0.757272] 4 cmdlinepart partitions found on MTD device spi32766.0</span><br><span class="line">[    0.763533] Creating 4 MTD partitions on <span class="string">"spi32766.0"</span>:</span><br><span class="line">[    0.768701] 0x000000000000-0x000000100000 : <span class="string">"uboot"</span></span><br><span class="line">[    0.774206] 0x000000100000-0x000000110000 : <span class="string">"dtb"</span></span><br><span class="line">[    0.779408] 0x000000110000-0x000000510000 : <span class="string">"kernel"</span></span><br><span class="line">[    0.784706] 0x000000510000-0x000001000000 : <span class="string">"rootfs"</span></span><br><span class="line">[    0.790529] libphy: Fixed MDIO Bus: probed</span><br><span class="line">[    0.795117] ehci_hcd: USB 2.0 <span class="string">'Enhanced'</span> Host Controller (EHCI) Driver</span><br><span class="line">[    0.801643] ehci-platform: EHCI generic platform driver</span><br><span class="line">[    0.807174] ehci-platform 1c1a000.usb: EHCI Host Controller</span><br><span class="line">[    0.812803] ehci-platform 1c1a000.usb: new USB bus registered, assigned bus number 1</span><br><span class="line">[    0.820762] ehci-platform 1c1a000.usb: irq 25, io mem 0x01c1a000</span><br><span class="line">[    0.854971] ehci-platform 1c1a000.usb: USB 2.0 started, EHCI 1.00</span><br><span class="line">[    0.862206] hub 1-0:1.0: USB hub found</span><br><span class="line">[    0.866158] hub 1-0:1.0: 1 port detected</span><br><span class="line">[    0.870659] ohci_hcd: USB 1.1 <span class="string">'Open'</span> Host Controller (OHCI) Driver</span><br><span class="line">[    0.876963] ohci-platform: OHCI generic platform driver</span><br><span class="line">[    0.882528] ohci-platform 1c1a400.usb: Generic Platform OHCI controller</span><br><span class="line">[    0.889256] ohci-platform 1c1a400.usb: new USB bus registered, assigned bus number 2</span><br><span class="line">[    0.897218] ohci-platform 1c1a400.usb: irq 26, io mem 0x01c1a400</span><br><span class="line">[    0.970040] hub 2-0:1.0: USB hub found</span><br><span class="line">[    0.973864] hub 2-0:1.0: 1 port detected</span><br><span class="line">[    0.981458] udc-core: couldn<span class="string">'t find an available UDC - added [g_cdc] to list of pending drivers</span></span><br><span class="line"><span class="string">[    0.991180] sun6i-rtc 1c20400.rtc: rtc core: registered rtc-sun6i as rtc0</span></span><br><span class="line"><span class="string">[    0.998080] sun6i-rtc 1c20400.rtc: RTC enabled</span></span><br><span class="line"><span class="string">[    1.002619] i2c /dev entries driver</span></span><br><span class="line"><span class="string">[    1.007604] input: ns2009_ts as /devices/platform/soc/1c2ac00.i2c/i2c-0/0-0048/input/input0</span></span><br><span class="line"><span class="string">[    1.017160] sunxi-wdt 1c20ca0.watchdog: Watchdog enabled (timeout=16 sec, nowayout=0)</span></span><br><span class="line"><span class="string">[    1.085196] sunxi-mmc 1c0f000.mmc: base:0xc4077000 irq:23</span></span><br><span class="line"><span class="string">[    1.092128] usbcore: registered new interface driver usbhid</span></span><br><span class="line"><span class="string">[    1.097807] usbhid: USB HID core driver</span></span><br><span class="line"><span class="string">[    1.103419] NET: Registered protocol family 17</span></span><br><span class="line"><span class="string">[    1.108119] Key type dns_resolver registered</span></span><br><span class="line"><span class="string">[    1.112543] Registering SWP/SWPB emulation handler</span></span><br><span class="line"><span class="string">[    1.123073] simple-framebuffer 43e89000.framebuffer: framebuffer at 0x43e89000, 0x177000 bytes, mapped to 0xc4400000</span></span><br><span class="line"><span class="string">[    1.133733] simple-framebuffer 43e89000.framebuffer: format=x8r8g8b8, mode=800x480x32, linelength=3200</span></span><br><span class="line"><span class="string">[    1.152018] Console: switching to colour frame buffer device 100x30</span></span><br><span class="line"><span class="string">[    1.164514] simple-framebuffer 43e89000.framebuffer: fb0: simplefb registered!</span></span><br><span class="line"><span class="string">[    1.173084] usb_phy_generic usb_phy_generic.0.auto: usb_phy_generic.0.auto supply vcc not found, using dummy regulator</span></span><br><span class="line"><span class="string">[    1.184473] musb-hdrc musb-hdrc.1.auto: MUSB HDRC host driver</span></span><br><span class="line"><span class="string">[    1.190317] musb-hdrc musb-hdrc.1.auto: new USB bus registered, assigned bus number 3</span></span><br><span class="line"><span class="string">[    1.199404] hub 3-0:1.0: USB hub found</span></span><br><span class="line"><span class="string">[    1.203266] hub 3-0:1.0: 1 port detected</span></span><br><span class="line"><span class="string">[    1.208558] using random self ethernet address</span></span><br><span class="line"><span class="string">[    1.213049] using random host ethernet address</span></span><br><span class="line"><span class="string">[    1.218666] usb0: HOST MAC 72:d4:27:dc:c4:8a</span></span><br><span class="line"><span class="string">[    1.222985] usb0: MAC 5a:ef:c7:4f:6c:26</span></span><br><span class="line"><span class="string">[    1.226971] g_cdc gadget: CDC Composite Gadget, version: King Kamehameha Day 2008</span></span><br><span class="line"><span class="string">[    1.234448] g_cdc gadget: g_cdc ready</span></span><br><span class="line"><span class="string">[    1.238489] sun6i-rtc 1c20400.rtc: setting system clock to 1970-01-01 00:00:12 UTC (12)</span></span><br><span class="line"><span class="string">[    1.246780] vcc3v0: disabling</span></span><br><span class="line"><span class="string">[    1.249752] vcc5v0: disabling</span></span><br><span class="line"><span class="string">[    1.252716] ALSA device list:</span></span><br><span class="line"><span class="string">[    1.255732]   No soundcards found.</span></span><br><span class="line"><span class="string">[    1.299597] random: crng init done</span></span><br><span class="line"><span class="string">[    2.213859] VFS: Mounted root (jffs2 filesystem) on device 31:3.</span></span><br><span class="line"><span class="string">[    2.221316] devtmpfs: mounted</span></span><br><span class="line"><span class="string">[    2.225633] Freeing unused kernel memory: 1024K</span></span><br><span class="line"><span class="string">[    2.784077] g_cdc gadget: high-speed config #1: CDC Composite (ECM + ACM)</span></span><br><span class="line"><span class="string">Starting syslogd: OK</span></span><br><span class="line"><span class="string">Starting klogd: OK</span></span><br><span class="line"><span class="string">Running sysctl: OK</span></span><br><span class="line"><span class="string">Initializing random number generator... done.</span></span><br><span class="line"><span class="string">Starting network: OK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Welcome to Buildroot</span></span><br><span class="line"><span class="string">buildroot login: root</span></span><br><span class="line"><span class="string"># cd /</span></span><br><span class="line"><span class="string"># ls</span></span><br><span class="line"><span class="string">bin      lib      media    proc     sbin     usr</span></span><br><span class="line"><span class="string">dev      lib32    mnt      root     sys      var</span></span><br><span class="line"><span class="string">etc      linuxrc  opt      run      tmp</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">CTRL-A Z for help | 115200 8N1 | NOR | Minicom 2.7 | VT102 | Offline | ttyUSB0</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>荔枝派-linux内核编译</title>
    <url>/2022/05/15/%E8%8D%94%E6%9E%9D%E6%B4%BE-linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h1 id="一、-获取Linux内核源码"><a href="#一、-获取Linux内核源码" class="headerlink" title="一、 获取Linux内核源码"></a>一、 获取Linux内核源码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Lichee-Pi/linux.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是zero-4.10.y分支</span></span><br><span class="line"><span class="comment"># zero-4.13.y 对网卡支持较好</span></span><br></pre></td></tr></table></figure>
<p><code>源码切换到分支 zero-4.13.y</code></p>
<p style="color: red;"> ！！！文件大小大概有 2.54G </p>

<h1 id="二、-内核选项配置"><a href="#二、-内核选项配置" class="headerlink" title="二、 内核选项配置"></a>二、 内核选项配置</h1><p>执行 <code>make ARCH=arm menuconfig</code> 打开内核配置菜单</p>
<p><img src="/Dom/imgs/2022_04_07/menuconfigHome.png" alt="menuconfigHome"></p>
<a id="more"></a>
<p>进入 <code>Device Drivers &gt; Memory Technology Device (MTD) support</code> 选项</p>
<p><img src="/Dom/imgs/2022_04_07/menuconfigDeviceMTD.png" alt="menuconfigDeviceMTD"></p>
<p>确保选择上 <code>TMD</code> 的 <code>&lt;*&gt; Command line partition table parsing</code>  支持，该项目用来解析uboot传递过来的flash分区信息；以及SPI-NOR 设备的支持。</p>
<p><img src="/Dom/imgs/2022_04_07/menuconfigDeviceMTD-sub.png" alt="menuconfigDeviceMTD-sub"></p>
<p>添加对jffs2文件系统的支持，路径在 <code>File systems &gt; Miscellaneous filesystems ‣ Journalling Flash File System v2 (JFFS2) support</code></p>
<p><img src="/Dom/imgs/2022_04_07/menuconfigJffs2File.png" alt="menuconfigJffs2File"></p>
<h1 id="三、修改设备树文件，使其支持-SPI-Flash"><a href="#三、修改设备树文件，使其支持-SPI-Flash" class="headerlink" title="三、修改设备树文件，使其支持 SPI Flash"></a>三、修改设备树文件，使其支持 SPI Flash</h1><p>修改设备树文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim arch/arm/boot/dts/sun8i-v3s-licheepi-zero.dts</span><br></pre></td></tr></table></figure>
<p>添加 SPI 节点配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;spi0 &#123;</span><br><span class="line">        status =&quot;okay&quot;;</span><br><span class="line"></span><br><span class="line">        xt25f128b:xt25f128b@0 &#123;</span><br><span class="line">                compatible = &quot;jedec,spi-nor&quot;;</span><br><span class="line">                reg = &lt;0x0&gt;;</span><br><span class="line">                spi-max-frequency = &lt;50000000&gt;;</span><br><span class="line">                #address-cells = &lt;1&gt;;</span><br><span class="line">                #size-cells = &lt;1&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>xt25f128b</code> 此型号必须是在 <code>drivers/mtd/spi-nor/spi-nor.c</code> 中支持的spi设备</p>
<p>修改 <code>drivers/mtd/spi-nor/spi-nor.c</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim drivers/mtd/spi-nor/spi-nor.c</span><br></pre></td></tr></table></figure>
<p>添加以下代码<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">"xt25f128b"</span>, INFO(<span class="number">0x0b4018</span>, <span class="number">0</span>, <span class="number">64</span> * <span class="number">1024</span>, <span class="number">256</span>, SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) &#125;,</span><br></pre></td></tr></table></figure></p>
<p><img src="/Dom/imgs/2022_04_07/spiFlash.png" alt="spiFlash"></p>
<h1 id="四、-内核编译"><a href="#四、-内核编译" class="headerlink" title="四、 内核编译"></a>四、 内核编译</h1><p>！！！ 此命令将会还原以上的 <code>menuconfig</code> 的一系列配置  如果还原需要重新 <code>make ARCH=arm menuconfig</code> 来配置 <code>make ARCH=arm licheepi_zero_defconfig</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-</span><br></pre></td></tr></table></figure>
<p>或者使用 -jn 来加速编译 n = 参与编译的内核个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j4</span><br></pre></td></tr></table></figure>
<p>编译需要话较长的时间！！！</p>
<p>镜像编译完成后  在 arch/arm/boot/ 文件夹下生成 zImage 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gongyu@gongyu-VirtualBox:~/Lichee_Pi/linux$ ls arch/arm/boot/</span><br><span class="line">bootp  compressed  dts  Image  install.sh  Makefile  zImage</span><br></pre></td></tr></table></figure>
<h2 id="编译错误"><a href="#编译错误" class="headerlink" title="编译错误"></a>编译错误</h2><h3 id="错误信息1"><a href="#错误信息1" class="headerlink" title="错误信息1"></a>错误信息1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error New address family defined, please update secclass_map.</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_04_07/zimageCompileError1.png" alt="zimageCompileError1"></p>
<p>（1）、修改 <code>vim scripts/selinux/mdp/mdp.c</code> 文件</p>
<p>注释掉 <code>#include &lt;sys/socket.h&gt;</code></p>
<p><img src="/Dom/imgs/2022_04_07/zimageCompileError1pass.png" alt="zimageCompileError1pass"></p>
<p>（2）、修改 <code>im security/selinux/include/classmap.h</code> 文件</p>
<p>添加 <code>#include &lt;linux/socket.h&gt;</code></p>
<p><img src="/Dom/imgs/2022_04_07/zimageCompileError1pass2.png" alt="zimageCompileError1pass2"></p>
<h3 id="错误信息2"><a href="#错误信息2" class="headerlink" title="错误信息2"></a>错误信息2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal error: openssl/opensslv.h: No such file or directory</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_04_07/zimageCompileError2.png" alt="zimageCompileError2"></p>
<p>需要安装 OpenSSL 开发包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure>
<h3 id="错误信息3"><a href="#错误信息3" class="headerlink" title="错误信息3"></a>错误信息3</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">没有规则可制作目标“debian/canonical-revoked-certs.pem”，由“certs/x509_revocation_list” 需求。 停止。</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_04_07/zimageCompileError3.png" alt="zimageCompileError3"></p>
<p>编辑 <code>.config</code> 配置文件 <code>vim .config</code></p>
<p>清空这两项配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONFIG_SYSTEM_TRUSTED_KEYS=<span class="string">"debian/canonical-certs.pem"</span></span><br><span class="line">CONFIG_SYSTEM_REVOCATION_KEYS=<span class="string">"debian/canonical-revoked-certs.pem"</span></span><br><span class="line"></span><br><span class="line">to</span><br><span class="line"></span><br><span class="line">CONFIG_SYSTEM_TRUSTED_KEYS=<span class="string">""</span></span><br><span class="line">CONFIG_SYSTEM_REVOCATION_KEYS=<span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>生成 dtbs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- dtbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># arch/arm/boot/dts/sun8i-v3s-licheepi-zero.dtb</span></span><br><span class="line"><span class="comment"># arch/arm/boot/dts/sun8i-v3s-licheepi-zero-dock.dtb</span></span><br></pre></td></tr></table></figure>
<p>dtb文件在 <code>arch/arm/boot/dts/</code></p>
<p>zImage在<code>arch/arm/boot/</code></p>
<p>生成内核模块 驱动模块（@TODO）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j16 INSTALL_MOD_PATH=out modules</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j16 INSTALL_MOD_PATH=out modules_install</span><br></pre></td></tr></table></figure>
<p>驱动模块在 <code>out/</code> 目录下</p>
]]></content>
  </entry>
  <entry>
    <title>荔枝派_u-boot编译</title>
    <url>/2022/03/12/%E8%8D%94%E6%9E%9D%E6%B4%BE-u-boot%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h1 id="一、基础编译"><a href="#一、基础编译" class="headerlink" title="一、基础编译"></a>一、基础编译</h1><p><code>linux（ubuntu）</code>、<code>git</code>、<code>python2</code>、<code>全志v3s</code>、<code>5寸电阻触摸屏（RGB屏）</code>、<code>USB TO UART</code></p>
<h2 id="1、安装python2"><a href="#1、安装python2" class="headerlink" title="1、安装python2"></a>1、安装python2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update <span class="comment"># 更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt-get install python2.7 <span class="comment"># 安装python2.7</span></span><br><span class="line">sudo apt install python-pip <span class="comment"># 安装python2.7对应的pip</span></span><br><span class="line"></span><br><span class="line">python -V <span class="comment"># 查看python版本验证是否安装成功</span></span><br><span class="line">pyp -V <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果python -V 无法读取到版本信息 或者不是2.7的版本  需要创建一个快捷方式（软连接）</span></span><br><span class="line">ls /usr/bin/python*  <span class="comment"># 查看python安装状态</span></span><br><span class="line"></span><br><span class="line">irtualBox:~/Lichee_Pi/u-boot$ ls /usr/bin/python*</span><br><span class="line">/usr/bin/python2.7  /usr/bin/python3  /usr/bin/python3.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line">sudo ln -s /usr/bin/python2.7 /usr/bin/python</span><br><span class="line"></span><br><span class="line">ls /usr/bin/pip  <span class="comment"># 查看安装目录</span></span><br><span class="line">ls /usr/bin/python*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如需卸载 python2.7 与 python-pip 执行下面两条命令</span></span><br><span class="line">sudo apt-get purge python2.7</span><br><span class="line">sudo apt-get purge --auto-remove python2.7  <span class="comment"># 卸载python 及其依赖</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python2 与 python3 不兼容</span></span><br><span class="line"><span class="comment"># 如果系统有安装python3 则需要重新安装python2 因为编译u-boot时的工具链里面需要python2的环境 否则报错</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/Dom/imgs/2022_03_12/python.png" alt="python"></p>
<h2 id="2、安装交叉编译器与工具链"><a href="#2、安装交叉编译器与工具链" class="headerlink" title="2、安装交叉编译器与工具链"></a>2、安装交叉编译器与工具链</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc-arm-linux-gnueabihf</span><br><span class="line"><span class="comment"># ARMHF 架构交叉编译器 安装此版本 gcc-linaro-6.3.1-2017.02-x86_64_arm-linux-gnueabihf (需手动下载)</span></span><br><span class="line"></span><br><span class="line">device-tree-compiler</span><br><span class="line"><span class="comment"># ARM Linux 设备树  DTC (device tree compiler) 将.dts编译为.dtb的工具  dtc编译器</span></span><br><span class="line"></span><br><span class="line">libncurses5-dev</span><br><span class="line"><span class="comment"># curses库 游标移动及屏幕的显示库</span></span><br></pre></td></tr></table></figure>
<h3 id="gcc-arm-linux-gnueabihf-安装"><a href="#gcc-arm-linux-gnueabihf-安装" class="headerlink" title="gcc-arm-linux-gnueabihf  安装"></a>gcc-arm-linux-gnueabihf  安装</h3><p>链接: <a href="https://pan.baidu.com/s/1VjjnR4zSwde1HUAbgcg64A?pwd=4jbn" target="_blank" rel="noopener">https://pan.baidu.com/s/1VjjnR4zSwde1HUAbgcg64A?pwd=4jbn</a> 提取码: 4jbn 复制这段内容后打开百度网盘手机App，操作更方便哦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf.tar.xz <span class="comment"># 解压</span></span><br><span class="line">sudo mv gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf /opt/ <span class="comment"># 移动解压后的文件到linux /opt/目录下</span></span><br><span class="line">sudo vim /etc/bash.bashrc  <span class="comment"># 编辑添加环境变量（永久生效）</span></span><br><span class="line"><span class="comment"># 在 `/etc/bash.basher` 文件中添加下面一行环境变量</span></span><br><span class="line">PATH=<span class="string">"<span class="variable">$PATH</span>:/opt/gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf/bin"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/bash.bashrc <span class="comment"># 重新激活 可以在所有用户生效</span></span><br><span class="line">arm-linux-gnueabihf-gcc -v <span class="comment"># 查看交叉编译器版本号 确认是否配置成功</span></span><br></pre></td></tr></table></figure>
<h3 id="device-tree-compiler-安装"><a href="#device-tree-compiler-安装" class="headerlink" title="device-tree-compiler  安装"></a>device-tree-compiler  安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install device-tree-compiler <span class="comment"># 使用 apt-get 安装</span></span><br></pre></td></tr></table></figure>
<h3 id="libncurses5-dev-安装"><a href="#libncurses5-dev-安装" class="headerlink" title="libncurses5-dev 安装"></a>libncurses5-dev 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure>
<h2 id="3、下载u-boot源码并编译"><a href="#3、下载u-boot源码并编译" class="headerlink" title="3、下载u-boot源码并编译"></a>3、下载u-boot源码并编译</h2><h3 id="下载-u-boot"><a href="#下载-u-boot" class="headerlink" title="下载 u-boot"></a>下载 u-boot</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 git 从 github clone 下来荔枝派官方u-boot v3s主线分支</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Lichee-Pi/u-boot.git -b v3s-current</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者克隆包含 spi-flash 驱动的体验版本uboot（适用于spi flash烧录），该驱动目前尚未合并到主线</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Lichee-Pi/u-boot.git -b v3s-spi-experimental</span><br><span class="line"></span><br><span class="line"><span class="comment"># clone 网络错误请使用代理</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/***   <span class="comment"># 后面带git地址</span></span><br><span class="line"><span class="comment"># 或者使用镜像代理</span></span><br><span class="line">https://gitclone.com/</span><br></pre></td></tr></table></figure>
<h3 id="u-boot-目录结构"><a href="#u-boot-目录结构" class="headerlink" title="u-boot 目录结构"></a>u-boot 目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── api                存放uboot提供的API接口函数</span><br><span class="line">├── arch               平台</span><br><span class="line">│   ├──arm</span><br><span class="line">│   │   └──cpu</span><br><span class="line">│   │   │   └──armv7</span><br><span class="line">│   │   └──dts</span><br><span class="line">│   │   │   └──*.dts   存放设备的dts,也就是设备配置相关的引脚信息</span><br><span class="line">├── board              对于不同的平台的开发板对应的代码</span><br><span class="line">├── cmd                大部分的命令的实现都在这个文件夹下面。</span><br><span class="line">├── common             公共的代码</span><br><span class="line">├── configs            各个板子的对应的配置文件都在里面，我们的Lichee配置也在里面</span><br><span class="line">├── disk               对磁盘的一些操作都在这个文件夹里面，例如分区等。</span><br><span class="line">├── doc                参考文档，平台等相关的使用文档。</span><br><span class="line">├── drivers            驱动文件</span><br><span class="line">├── dts                device tree</span><br><span class="line">├── examples           官方给出的一些样例程序</span><br><span class="line">├── fs                 文件系统</span><br><span class="line">├── include            头文件</span><br><span class="line">├── lib                常用库</span><br><span class="line">├── Licenses           license声明</span><br><span class="line">├── net                网络，小型网络协议栈</span><br><span class="line">├── post               上电自检程序</span><br><span class="line">├── scripts            编译脚本和Makefile文件</span><br><span class="line">├── spl                second program loader，即相当于二级uboot启动。</span><br><span class="line">├── <span class="built_in">test</span>               单元测试程序。</span><br><span class="line">└── tools              uboot常用工具。</span><br></pre></td></tr></table></figure>
<h3 id="编译-u-boot"><a href="#编译-u-boot" class="headerlink" title="编译 u-boot"></a>编译 u-boot</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> u-boot <span class="comment"># 打开 u-boot 目录</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- LicheePi_Zero_800x480LCD_defconfig <span class="comment"># 配置uboot</span></span><br><span class="line"><span class="comment"># 设置 make 宏</span></span><br><span class="line"><span class="comment"># ARCH：编译arch/arm下的代码；</span></span><br><span class="line"><span class="comment"># CROSS_COMPILE：编译器选arm-linux-gnueabihf-；</span></span><br><span class="line"><span class="comment"># LicheePi_Zero_800x480LCD_defconfig 使用 config 下 800*480LCD 的屏幕配置</span></span><br><span class="line"><span class="comment"># 或者使用 LicheePi_Zero480x272LCD_defconfig 或 LicheePi_Zero_defconfig 屏幕配置</span></span><br><span class="line"><span class="comment"># 也可以直接执行 `make LicheePi_Zero_800x480LCD_defconfig` 对荔枝派 Zero 显示设备进行配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果配置命令失败（错误信息如下）</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------</span></span><br><span class="line">gongyu@gongyu-VirtualBox:~/Lichee_Pi/u-boot$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- LicheePi_Zero_800x480LCD_defconfig</span><br><span class="line">  HOSTCC  scripts/basic/fixdep</span><br><span class="line">/bin/sh: 1: cc: not found</span><br><span class="line">make[1]: *** [scripts/Makefile.host:99：scripts/basic/fixdep] 错误 127</span><br><span class="line">make: *** [Makefile:398：scripts_basic] 错误 2</span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 如果配置命令失败 需要安装 bison、flex 这两个包</span></span><br><span class="line">sudo apt install bison flex</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_03_12/makeError1.png" alt="makeError1"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make ARCH=arm menuconfig  <span class="comment"># 打开配置菜单对u-boot配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果运行展开配置菜单报错（错误信息如下）</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------</span></span><br><span class="line">gongyu@DESKTOP-RQ1MEDL:/mnt/f/work/Lichee_Pi/u-boot$ make ARCH=arm menuconfig</span><br><span class="line">  HOSTCC  scripts/kconfig/mconf.o</span><br><span class="line">&lt;<span class="built_in">command</span>-line&gt;: fatal error: curses.h: No such file or directory</span><br><span class="line">compilation terminated.</span><br><span class="line">make[1]: *** [scripts/Makefile.host:116: scripts/kconfig/mconf.o] Error 1</span><br><span class="line">make: *** [Makefile:478: menuconfig] Error 2</span><br><span class="line"><span class="comment">#--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 如果运行展开配置菜单报错 需要安装 libncurses5-dev</span></span><br><span class="line">sudo apt-get install libncurses5-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置菜单配置完成后编辑并输入bin文件</span></span><br><span class="line">time make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- 2&gt;&amp;1 | tee build.log <span class="comment"># 编译u-boot 并输入日志</span></span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_03_12/image-20220312201449693.png" alt="image-20220312201449693"></p>
<p><strong style="color: red;"> 配置完u-boot后再编译 </strong></p>
<p>编译完成后，在当前目录下生成了 u-boot-sunxi-with-spl.bin ，可以烧录到8K偏移处启动。（tf卡）</p>
<h1 id="二、u-boot-配置"><a href="#二、u-boot-配置" class="headerlink" title="二、u-boot 配置"></a>二、u-boot 配置</h1><p>命令执行：<code>make ARCH=arm menuconfig</code> 使用菜单形势配置u-boot</p>
<p><img src="/Dom/imgs/2022_03_12/202203122156.png" alt="202203122156"></p>
<h2 id="1、简单配置"><a href="#1、简单配置" class="headerlink" title="1、简单配置"></a>1、简单配置</h2><p><code>Architecture select</code> 架构选择  选择arm架构</p>
<p><code>ARM architecture</code> arm架构配置  lcd配置  ddr配置  芯片选型 等</p>
<p><img src="/Dom/imgs/2022_03_12/202203122214.png" alt="202203122214"></p>
<p><code>Boot images</code> cpu时钟配置 等</p>
<p><code>delay in seconds before automatically booting</code> uboot开机的时候等待时间 默认为2s</p>
<p><code>SPL / TPL</code> 外设配置</p>
<p><code>Device Drivers</code> 设配驱动配置</p>
<h2 id="2、配置-SPI-Flash"><a href="#2、配置-SPI-Flash" class="headerlink" title="2、配置 SPI Flash"></a>2、配置 SPI Flash</h2><p><code>由于目前Uboot环境变量固定存放在1MB位置之内，所有留给uboot的空间固定到flash前1MB的位置不变。每个分区的大小必须是擦除块大小的整数倍，XT25F128B的擦除块大小是64KB。</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">分区序号</th>
<th style="text-align:center">分区大小</th>
<th style="text-align:center">分区描述</th>
<th style="text-align:center">地址空间及分区名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">mtd0</td>
<td style="text-align:center">1MB</td>
<td style="text-align:center">spl+uboot</td>
<td style="text-align:center">0x0000000-0x0100000 : “uboot”</td>
</tr>
<tr>
<td style="text-align:center">mtd1</td>
<td style="text-align:center">64KB</td>
<td style="text-align:center">dtb文件</td>
<td style="text-align:center">0x0100000-0x0110000: “dtb”</td>
</tr>
<tr>
<td style="text-align:center">mtd2</td>
<td style="text-align:center">4MB</td>
<td style="text-align:center">linux内核</td>
<td style="text-align:center">0x0110000-0x0510000 : “kernel”</td>
</tr>
<tr>
<td style="text-align:center">mtd3</td>
<td style="text-align:center">10MiB 960KiB</td>
<td style="text-align:center">根文件系统</td>
<td style="text-align:center">0x0510000-0x1000000 : “rootfs”</td>
</tr>
</tbody>
</table>
<h3 id="2-1、配置-u-boot-支持-Nor-Flash"><a href="#2-1、配置-u-boot-支持-Nor-Flash" class="headerlink" title="2.1、配置 u-boot 支持 Nor Flash"></a>2.1、配置 u-boot 支持 Nor Flash</h3><p><code>荔枝派 zero 上面焊接了一个 芯天下 的 Nor Flash 型号为：XT25F128B 16MByte。</code></p>
<p>需要将 <code>u-boot</code> 切换到 <code>v3s-spi-experimental</code>分支下</p>
<p><code>make ARCH=arm menuconfig</code> 打开u-boot菜单配置</p>
<p>在 u-boot 配置下选择自己对应的 SPI Flash 对应的芯片厂商</p>
<p>XT25F128B 与 Winbond 公司的 w25qxxx 系列的 flash 兼容性很高  所以选中 <code>Winbond SPI flash support</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Device Drivers  ---&gt; </span><br><span class="line">	SPI Flash Support  ---&gt; </span><br><span class="line">     ┌───────────────────────────────────────────────────────────────────────────────────────────┐ </span><br><span class="line">    │ │          [*] Enable Driver Model for SPI flash                                          │ │</span><br><span class="line">    │ │          [*] Legacy SPI Flash Interface support                                         │ │</span><br><span class="line">    │ │          [ ]   SPI flash Bank/Extended address register support                         │ │</span><br><span class="line">    │ │          [ ]   Atmel SPI flash support                                                  │ │</span><br><span class="line">    │ │          [ ]   EON SPI flash support                                                    │ │</span><br><span class="line">    │ │          [ ]   GigaDevice SPI flash support                                             │ │</span><br><span class="line">    │ │          [ ]   Macronix SPI flash support                                               │ │</span><br><span class="line">    │ │          [ ]   Spansion SPI flash support                                               │ │</span><br><span class="line">    │ │          [ ]   STMicro SPI flash support                                                │ │</span><br><span class="line">    │ │          [ ]   SST SPI flash support                                                    │ │</span><br><span class="line">    │ │          [*]   Winbond SPI flash support                                                │ │</span><br><span class="line">    │ │          [*]   Use small 4096 B erase sectors                                           │ │</span><br><span class="line">    │ │          [ ]   AT45xxx DataFlash support                                                │ │</span><br><span class="line">    │ │          [ ]   SPI Flash MTD support                                                    │ │</span><br><span class="line">    │ │          [*] Support for SPI Flash on Allwinner SoCs in SPL                             │ │</span><br></pre></td></tr></table></figure>
<h3 id="2-2、配置-uboot-默认环境变量对Nor-Flash的支持"><a href="#2-2、配置-uboot-默认环境变量对Nor-Flash的支持" class="headerlink" title="2.2、配置 uboot 默认环境变量对Nor Flash的支持"></a>2.2、配置 uboot 默认环境变量对Nor Flash的支持</h3><p><code>在 include/configs/sun8i.h 中添加 CONFIG_BOOTCOMMAND 和 CONFIG_BOOTARGS 环境变量设置</code></p>
<p>命令：<code>vim include/configs/sun8i.h</code> 在 <code>#include &lt;configs/sunxi-common.h&gt;</code> 前面添加以下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_BOOTCOMMAND   <span class="meta-string">"sf probe 0; "</span>                           \</span></span><br><span class="line">                             <span class="string">"sf read 0x41800000 0x100000 0x10000; "</span>  \</span><br><span class="line">                             <span class="string">"sf read 0x41000000 0x110000 0x400000; "</span> \</span><br><span class="line">                             <span class="string">"bootz 0x41000000 - 0x41800000"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_BOOTARGS      <span class="meta-string">"console=ttyS0,115200 earlyprintk panic=5 rootwait "</span> \</span></span><br><span class="line">                             <span class="string">"mtdparts=spi32766.0:1M(uboot)ro,64k(dtb)ro,4M(kernel)ro,-(rootfs) root=31:03 rw rootfstype=jffs2"</span></span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_03_12/config_sun8i_h.png" alt="config_sun8i_h"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果需要在LCD上也显示日志  加入  console=tty0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_BOOTARGS      <span class="meta-string">"console=tty0 console=ttyS0,115200 earlyprintk panic=5 rootwait "</span> \</span></span><br><span class="line">                             <span class="string">"mtdparts=spi32766.0:1M(uboot)ro,64k(dtb)ro,4M(kernel)ro,-(rootfs) root=31:03 rw rootfstype=jffs2"</span></span><br></pre></td></tr></table></figure>
<p>如果需要USB输入显示在LCD交互上，请在系统启动成功后修改 <code>vi /etc/inittab</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># console::respawn:-/bin/sh  # 注释掉原有的console  加入如下两行</span></span><br><span class="line">ttyS0::respawn:-/bin/sh</span><br><span class="line">tty0::respawn:-/bin/sh</span><br></pre></td></tr></table></figure>
<h4 id="（1）、环境命令解析："><a href="#（1）、环境命令解析：" class="headerlink" title="（1）、环境命令解析："></a>（1）、环境命令解析：</h4><ul>
<li><code>sf probe 0;</code>   初始化 Flash 设备 （CS 拉低）</li>
<li><code>sf read 0x41800000 0x100000 0x10000;</code>   从 Flash 0x100000 （1MB） 位置读取 dtb 放到内存  0x41800000 偏移地址。如果是 bsp 的 bin， 则是 0x41d00000 偏移地址。</li>
<li><code>sf read 0x41000000 0x110000 0x400000;</code>    从 Flash 0x110000 （1MB + 64KB） 位置读取 dtb 放到内存 0x41000000 偏移地址。</li>
<li><code>bootz 0x41000000 - 0x41800000</code>    启动内核  0x41000000 内核地址；0x41800000 dtb 地址。</li>
</ul>
<h4 id="（2）、启动参数解析："><a href="#（2）、启动参数解析：" class="headerlink" title="（2）、启动参数解析："></a>（2）、启动参数解析：</h4><ul>
<li><code>console=ttyS0,115200 earlyprintk panic=5 rootwait</code>    在串口0输出信息  115200 波特率</li>
<li><code>mtdparts=spi32766.0:1M(uboot)ro,64k(dtb)ro,4M(kernel)ro,-(rootfs) root=31:03 rw rootfstype=jffs2</code>   spi32766.0 是设备名，后面是分区大小，名字，读写属性。</li>
<li><code>root=31:03</code>    表示根文件系统时 mtd3；jffs2 格式。</li>
</ul>
<h3 id="2-3、配置-spi-id"><a href="#2-3、配置-spi-id" class="headerlink" title="2.3、配置 spi id"></a>2.3、配置 spi id</h3><p>暂时不配置spi id，将uboot烧录到v3s中也可以运行，只是串口会输出错误信息，屏幕正常显示 log 和uboot版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hit any key to stop autoboot:  0 </span><br><span class="line">SF: unrecognized JEDEC id bytes: 0b, 40, 18</span><br><span class="line">Failed to initialize SPI flash at 0:0 (error -2)</span><br><span class="line">No SPI flash selected. Please run `sf probe<span class="string">'</span></span><br><span class="line"><span class="string">No SPI flash selected. Please run `sf probe'</span></span><br><span class="line">=&gt;</span><br></pre></td></tr></table></figure>
<h4 id="（1）、修改uboot-spi-flash-c-文件"><a href="#（1）、修改uboot-spi-flash-c-文件" class="headerlink" title="（1）、修改uboot  spi_flash.c 文件"></a>（1）、修改uboot  spi_flash.c 文件</h4><p>先查找错误位置 <code>vim drivers/mtd/spi/spi_flash.c</code></p>
<p><img src="/Dom/imgs/2022_03_12/ubootError2.png" alt="ubootError2"></p>
<p>添加XT25F128B SPI Flash id 到 <code>spi_flash_ids.c</code> <code>drivers/mtd/spi/spi_flash_ids.c</code></p>
<p>由于需要移植的 flash 芯片特性和 w25qxxx 系列的 flash 相似，所以可以直接复制过来，修改后如下<br><code>{&quot;xt25f128b&quot;,      INFO(0x0b4018, 0x0,  64 * 1024,   256, RD_FULL | WR_QPP | SECT_4K) },</code></p>
<p><img src="/Dom/imgs/2022_03_12/editspi_flash.png" alt="editspi_flash"></p>
<p>0x0b4018 是uboot报错的id <code>SF: unrecognized JEDEC id bytes: 0b, 40, 18</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置数据格式如下</span></span><br><span class="line">/* Used when the <span class="string">"_ext_id"</span> is two bytes at most */</span><br><span class="line"><span class="comment">#define INFO(_jedec_id, _ext_id, _sector_size, _n_sectors, _flags)    \</span></span><br><span class="line">        .id = &#123;                         \</span><br><span class="line">            ...</span><br><span class="line">        .id_len = (!(_jedec_id) ? 0 : (3 + ((_ext_id) ? 2 : 0))),   \</span><br><span class="line">        .sector_size = (_sector_size),              \</span><br><span class="line">        .n_sectors = (_n_sectors),              \</span><br><span class="line">        .page_size = 256,                   \</span><br><span class="line">        .flags = (_flags),</span><br></pre></td></tr></table></figure>
<h4 id="（2）、重新编译uboot-并烧录"><a href="#（2）、重新编译uboot-并烧录" class="headerlink" title="（2）、重新编译uboot 并烧录"></a>（2）、重新编译uboot 并烧录</h4><h1 id="三、u-boot-SPI-Flash-烧录"><a href="#三、u-boot-SPI-Flash-烧录" class="headerlink" title="三、u-boot  SPI Flash 烧录"></a>三、u-boot  SPI Flash 烧录</h1><h2 id="1、全志-sunxi-tools-烧录工具安装"><a href="#1、全志-sunxi-tools-烧录工具安装" class="headerlink" title="1、全志 sunxi-tools 烧录工具安装"></a>1、全志 <code>sunxi-tools</code> 烧录工具安装</h2><h3 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">sudo apt-get install pkg-config pkgconf zlib1g-dev libusb-1.0-0-dev</span><br></pre></td></tr></table></figure>
<p><span style="color: red;">安装时可能会报错</span><br><img src="/Dom/imgs/2022_03_12/installError1.png" alt="installError1"></p>
<p>好像 pkg-config 要后面装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pkgconf</span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line">sudo apt-get install libusb-1.0-0-dev</span><br><span class="line">sudo apt-get install pkg-config</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取源码</span></span><br><span class="line"><span class="comment"># v3s 分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b v3s https://github.com/Icenowy/sunxi-tools.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># v3s spiflash 分支 （荔枝派 Zero spi 版本）</span></span><br><span class="line">git <span class="built_in">clone</span> -b v3s-spi https://github.com/Icenowy/sunxi-tools.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># f1c100s 分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b f1c100s https://github.com/Icenowy/sunxi-tools.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># f1c100s-spiflash 分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b f1c100s-spiflash https://github.com/Icenowy/sunxi-tools.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入源码文件夹</span></span><br><span class="line"><span class="built_in">cd</span> sunxi-tools</span><br><span class="line"><span class="comment"># 编译和安装</span></span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>
<h3 id="1-2、基础用法"><a href="#1-2、基础用法" class="headerlink" title="1.2、基础用法"></a>1.2、基础用法</h3><p>参考 <a href="http://nano.lichee.pro/step_by_step/two_sunxi-tools.html" target="_blank" rel="noopener">[编译和使用sunxi-tools]</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有芯片的信息：</span></span><br><span class="line">sudo sunxi-fel -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看芯片信息：</span></span><br><span class="line">sudo sunxi-fel ver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载并执行uboot的spl</span></span><br><span class="line">sudo sunxi-fel spl 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示spiflash的信息 </span></span><br><span class="line">sudo sunxi-fel spiflash-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用指定地址的函数 </span></span><br><span class="line">sudo sunxi-fel <span class="built_in">exec</span> 地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把文件内容写入内存指定地址(-p是显示写入进度) </span></span><br><span class="line">sudo sunxi-fel -p write 地址 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取spiflash指定地址的数据并写入到文件 </span></span><br><span class="line">sudo sunxi-fel spiflash-read 地址 长度 存放数据的文件路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入指定文件的指定长度的内容到spiflash的指定地址 </span></span><br><span class="line">sudo sunxi-fel spiflash-write 地址 长度 存放数据的文件路径</span><br></pre></td></tr></table></figure>
<h2 id="2、进入-FEL-模式使用-sunxi-fel-工具烧录-（全志专用工具）"><a href="#2、进入-FEL-模式使用-sunxi-fel-工具烧录-（全志专用工具）" class="headerlink" title="2、进入 FEL 模式使用 sunxi-fel 工具烧录 （全志专用工具）"></a>2、进入 FEL 模式使用 <code>sunxi-fel</code> 工具烧录 （全志专用工具）</h2><blockquote>
<ul>
<li><strong>TF卡和 spi flash 都没有可启动的镜像</strong></li>
</ul>
<p>TF卡空或者不插，spi flash 内容为空，上吊就会自动进入 fel 下载模式</p>
<ul>
<li><strong>TF卡中有进入FEL模式的特殊固件 <code>el-sdboot.sunxi</code> </strong></li>
</ul>
<p>如果 spi flash 有启动镜像，那么需要在 TF 卡中烧录一个 sunxi 提供的启动工具，那么插入该 TF 卡上电会进入 fel 模式；</p>
<p>命令： <code>dd if=fel-sdboot.sunxi of=/dev/mmcblk0 bs=1024 seek=8</code></p>
<ul>
<li><strong>上电时将 SPI_MISO 引脚拉为低电平</strong></li>
</ul>
<p>该引脚为 <code>boot</code> 引脚，上电时如果检测到该引脚为低电平就会进入 fel 下载模式。</p>
</blockquote>
<h2 id="3、准备烧录uboot（SPI-Flash）"><a href="#3、准备烧录uboot（SPI-Flash）" class="headerlink" title="3、准备烧录uboot（SPI Flash）"></a>3、准备烧录uboot（SPI Flash）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//检查是否可以探测到芯片信息：</span><br><span class="line">sudo sunxi-fel -l</span><br><span class="line">//确认是否成功进入fel模式：</span><br><span class="line">sudo sunxi-fel ver</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_03_12/20220325151309.png" alt="20220325151309"></p>
<h3 id="3-1、烧录到-RAM-中执行，以-uboot-file-with-spl-形式运行（单次运行，测试使用）"><a href="#3-1、烧录到-RAM-中执行，以-uboot-file-with-spl-形式运行（单次运行，测试使用）" class="headerlink" title="3.1、烧录到 RAM 中执行，以 uboot file-with-spl 形式运行（单次运行，测试使用）"></a>3.1、烧录到 RAM 中执行，以 uboot file-with-spl 形式运行（单次运行，测试使用）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sunxi-fel uboot u-boot-sunxi-with-spl.bin</span><br><span class="line"></span><br><span class="line">//或者执行烧录地址</span><br><span class="line">sudo sunxi-fel -p write 0x40000000 u-boot-sunxi-with-spl.bin</span><br><span class="line">sudo sunxi-fel <span class="built_in">exec</span> 0x40000000</span><br></pre></td></tr></table></figure>
<h3 id="3-2、烧录到-SPI-Flash-（烧录完成后重新上电）"><a href="#3-2、烧录到-SPI-Flash-（烧录完成后重新上电）" class="headerlink" title="3.2、烧录到 SPI Flash （烧录完成后重新上电）"></a>3.2、烧录到 SPI Flash （烧录完成后重新上电）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sunxi-fel -p spiflash-write 0 u-boot-sunxi-with-spl.bin</span><br></pre></td></tr></table></figure>
<p><img src="/Dom/imgs/2022_03_12/20220325153053.png" alt="uboot烧录成功后Uart0输出的日志"></p>
<p>u-boot运行效果</p>
<p><img src="/Dom/imgs/2022_03_12/ubootimg1.jpg" alt="ubootimg1"></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /opt/工具 /usr/<span class="built_in">local</span>/bin/工具  <span class="comment"># 将opt目录下指定的文件 软连接到 /usr/local/bin/文件 中（创建快捷方式）</span></span><br><span class="line">sudo mv /工具 /opt/ <span class="comment"># 将的文件移动到 opt 下</span></span><br><span class="line">tar -xJf 工具.tar.xz  <span class="comment"># 解压指定压缩包（不显示进度，静默解压）</span></span><br><span class="line">tar -xvf 工具.tar.xz  <span class="comment"># 解压指定压缩包（显示详细解压进度）</span></span><br><span class="line">sudo apt-get purge 工具 <span class="comment"># 卸载指定工具</span></span><br><span class="line">sudo apt-get purge --auto-remove 工具  <span class="comment"># 卸载指定工具 及其依赖</span></span><br><span class="line">rm -rf 文件或者文件夹  <span class="comment"># 删除指定的文件或者文件夹</span></span><br><span class="line">mkdir 文件夹 <span class="comment"># 创建文件夹</span></span><br><span class="line">sudo cp ./文件 /某某文件夹  <span class="comment"># 将指定的文件拷贝到指定的文件目录</span></span><br><span class="line"></span><br><span class="line">ls /usr/bin/python <span class="comment"># 查看运行目录下是否有安装指定的应用</span></span><br><span class="line">ls /usr/<span class="built_in">local</span>/bin/python <span class="comment"># 查看本地运行目录下是否有安装的指定应用</span></span><br><span class="line">ls /usr/bin/pyth* <span class="comment"># 模糊查询</span></span><br><span class="line"></span><br><span class="line">dmesg | grep tty <span class="comment"># 查看串口设备</span></span><br><span class="line"></span><br><span class="line">sudo tzselect <span class="comment"># 修改系统时区</span></span><br><span class="line">sudo hwclock --systohc <span class="comment"># 时区同步到硬件</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
